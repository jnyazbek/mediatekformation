1707462018
ac1e01bd81d25a49725bc38f4603e687-phpdoc%3Ab64bb1165c940536e0b6dbbf2ede4013-efa8e2bdee0f6e256465fcb19aee92e8
s:145760:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6ImVmYThlMmJkZWUwZjZlMjU2NDY1ZmNiMTlhZWU5MmU4IjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MzY6ImVhMWJhMzA3ZWFmYTZhYjg5MGRiOWQxOGM1NjJhN2I4LnBocCI7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBwYXRoIjtzOjU4OiJ2YXIvY2FjaGUvZGV2L3R3aWcvZWEvZWExYmEzMDdlYWZhNmFiODkwZGI5ZDE4YzU2MmE3YjgucGhwIjtzOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHNvdXJjZSI7czo4OTcxNToiPD9waHAKCnVzZSBUd2lnXEVudmlyb25tZW50Owp1c2UgVHdpZ1xFcnJvclxMb2FkZXJFcnJvcjsKdXNlIFR3aWdcRXJyb3JcUnVudGltZUVycm9yOwp1c2UgVHdpZ1xFeHRlbnNpb25cU2FuZGJveEV4dGVuc2lvbjsKdXNlIFR3aWdcTWFya3VwOwp1c2UgVHdpZ1xTYW5kYm94XFNlY3VyaXR5RXJyb3I7CnVzZSBUd2lnXFNhbmRib3hcU2VjdXJpdHlOb3RBbGxvd2VkVGFnRXJyb3I7CnVzZSBUd2lnXFNhbmRib3hcU2VjdXJpdHlOb3RBbGxvd2VkRmlsdGVyRXJyb3I7CnVzZSBUd2lnXFNhbmRib3hcU2VjdXJpdHlOb3RBbGxvd2VkRnVuY3Rpb25FcnJvcjsKdXNlIFR3aWdcU291cmNlOwp1c2UgVHdpZ1xUZW1wbGF0ZTsKCi8qIEBXZWJQcm9maWxlci9Qcm9maWxlci9iYXNlX2pzLmh0bWwudHdpZyAqLwpjbGFzcyBfX1R3aWdUZW1wbGF0ZV83YTdlNjczM2VlZWVkNTg0MDk1ODExOGY2ZjRkMDg0NyBleHRlbmRzIFRlbXBsYXRlCnsKICAgIHByaXZhdGUgJHNvdXJjZTsKICAgIHByaXZhdGUgJG1hY3JvcyA9IFtdOwoKICAgIHB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdChFbnZpcm9ubWVudCAkZW52KQogICAgewogICAgICAgIHBhcmVudDo6X19jb25zdHJ1Y3QoJGVudik7CgogICAgICAgICR0aGlzLT5zb3VyY2UgPSAkdGhpcy0+Z2V0U291cmNlQ29udGV4dCgpOwoKICAgICAgICAkdGhpcy0+cGFyZW50ID0gZmFsc2U7CgogICAgICAgICR0aGlzLT5ibG9ja3MgPSBbCiAgICAgICAgXTsKICAgIH0KCiAgICBwcm90ZWN0ZWQgZnVuY3Rpb24gZG9EaXNwbGF5KGFycmF5ICRjb250ZXh0LCBhcnJheSAkYmxvY2tzID0gW10pCiAgICB7CiAgICAgICAgJG1hY3JvcyA9ICR0aGlzLT5tYWNyb3M7CiAgICAgICAgJF9faW50ZXJuYWxfNWEyN2E4YmEyMWNhNzliNjE5MzIzNzZiMmZhOTIyZDIgPSAkdGhpcy0+ZXh0ZW5zaW9uc1siU3ltZm9ueVxcQnVuZGxlXFxXZWJQcm9maWxlckJ1bmRsZVxcVHdpZ1xcV2ViUHJvZmlsZXJFeHRlbnNpb24iXTsKICAgICAgICAkX19pbnRlcm5hbF81YTI3YThiYTIxY2E3OWI2MTkzMjM3NmIyZmE5MjJkMi0+ZW50ZXIoJF9faW50ZXJuYWxfNWEyN2E4YmEyMWNhNzliNjE5MzIzNzZiMmZhOTIyZDJfcHJvZiA9IG5ldyBcVHdpZ1xQcm9maWxlclxQcm9maWxlKCR0aGlzLT5nZXRUZW1wbGF0ZU5hbWUoKSwgInRlbXBsYXRlIiwgIkBXZWJQcm9maWxlci9Qcm9maWxlci9iYXNlX2pzLmh0bWwudHdpZyIpKTsKCiAgICAgICAgJF9faW50ZXJuYWxfNmY0N2JiZTk5ODNhZjgxZjFlNzQ1MGU5YTNlMzc2OGYgPSAkdGhpcy0+ZXh0ZW5zaW9uc1siU3ltZm9ueVxcQnJpZGdlXFxUd2lnXFxFeHRlbnNpb25cXFByb2ZpbGVyRXh0ZW5zaW9uIl07CiAgICAgICAgJF9faW50ZXJuYWxfNmY0N2JiZTk5ODNhZjgxZjFlNzQ1MGU5YTNlMzc2OGYtPmVudGVyKCRfX2ludGVybmFsXzZmNDdiYmU5OTgzYWY4MWYxZTc0NTBlOWEzZTM3NjhmX3Byb2YgPSBuZXcgXFR3aWdcUHJvZmlsZXJcUHJvZmlsZSgkdGhpcy0+Z2V0VGVtcGxhdGVOYW1lKCksICJ0ZW1wbGF0ZSIsICJAV2ViUHJvZmlsZXIvUHJvZmlsZXIvYmFzZV9qcy5odG1sLnR3aWciKSk7CgogICAgICAgIC8vIGxpbmUgMwogICAgICAgIGVjaG8gIjxzY3JpcHQiOwogICAgICAgIGlmICgoYXJyYXlfa2V5X2V4aXN0cygiY3NwX3NjcmlwdF9ub25jZSIsICRjb250ZXh0KSAmJiAoaXNzZXQoJGNvbnRleHRbImNzcF9zY3JpcHRfbm9uY2UiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY3NwX3NjcmlwdF9ub25jZSIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjc3Bfc2NyaXB0X25vbmNlIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY3NwX3NjcmlwdF9ub25jZSIgZG9lcyBub3QgZXhpc3QuJywgMywgJHRoaXMtPnNvdXJjZSk7IH0pKCkpKSkgewogICAgICAgICAgICBlY2hvICIgbm9uY2U9XCIiOwogICAgICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCAoaXNzZXQoJGNvbnRleHRbImNzcF9zY3JpcHRfbm9uY2UiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY3NwX3NjcmlwdF9ub25jZSIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjc3Bfc2NyaXB0X25vbmNlIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY3NwX3NjcmlwdF9ub25jZSIgZG9lcyBub3QgZXhpc3QuJywgMywgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICBlY2hvICJcIiI7CiAgICAgICAgfQogICAgICAgIGVjaG8gIj4vKjwhW0NEQVRBWyovCiAgICAiOwogICAgICAgIC8vIGxpbmUgNwogICAgICAgIGVjaG8gIgppZiAodHlwZW9mIFNmanMgPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBTZmpzLmxvYWRUb29sYmFyID09PSAndW5kZWZpbmVkJykgewogICAgU2ZqcyA9IChmdW5jdGlvbigpIHsKICAgICAgICBcInVzZSBzdHJpY3RcIjsKCiAgICAgICAgaWYgKCdjbGFzc0xpc3QnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkgewogICAgICAgICAgICB2YXIgaGFzQ2xhc3MgPSBmdW5jdGlvbiAoZWwsIGNzc0NsYXNzKSB7IHJldHVybiBlbC5jbGFzc0xpc3QuY29udGFpbnMoY3NzQ2xhc3MpOyB9OwogICAgICAgICAgICB2YXIgcmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbihlbCwgY3NzQ2xhc3MpIHsgZWwuY2xhc3NMaXN0LnJlbW92ZShjc3NDbGFzcyk7IH07CiAgICAgICAgICAgIHZhciBhZGRDbGFzcyA9IGZ1bmN0aW9uKGVsLCBjc3NDbGFzcykgeyBlbC5jbGFzc0xpc3QuYWRkKGNzc0NsYXNzKTsgfTsKICAgICAgICAgICAgdmFyIHRvZ2dsZUNsYXNzID0gZnVuY3Rpb24oZWwsIGNzc0NsYXNzKSB7IGVsLmNsYXNzTGlzdC50b2dnbGUoY3NzQ2xhc3MpOyB9OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhciBoYXNDbGFzcyA9IGZ1bmN0aW9uIChlbCwgY3NzQ2xhc3MpIHsgcmV0dXJuIGVsLmNsYXNzTmFtZS5tYXRjaChuZXcgUmVnRXhwKCdcXFxcYicgKyBjc3NDbGFzcyArICdcXFxcYicpKTsgfTsKICAgICAgICAgICAgdmFyIHJlbW92ZUNsYXNzID0gZnVuY3Rpb24oZWwsIGNzc0NsYXNzKSB7IGVsLmNsYXNzTmFtZSA9IGVsLmNsYXNzTmFtZS5yZXBsYWNlKG5ldyBSZWdFeHAoJ1xcXFxiJyArIGNzc0NsYXNzICsgJ1xcXFxiJyksICcgJyk7IH07CiAgICAgICAgICAgIHZhciBhZGRDbGFzcyA9IGZ1bmN0aW9uKGVsLCBjc3NDbGFzcykgeyBpZiAoIWhhc0NsYXNzKGVsLCBjc3NDbGFzcykpIHsgZWwuY2xhc3NOYW1lICs9IFwiIFwiICsgY3NzQ2xhc3M7IH0gfTsKICAgICAgICAgICAgdmFyIHRvZ2dsZUNsYXNzID0gZnVuY3Rpb24oZWwsIGNzc0NsYXNzKSB7IGhhc0NsYXNzKGVsLCBjc3NDbGFzcykgPyByZW1vdmVDbGFzcyhlbCwgY3NzQ2xhc3MpIDogYWRkQ2xhc3MoZWwsIGNzc0NsYXNzKTsgfTsKICAgICAgICB9CgogICAgICAgIHZhciBub29wID0gZnVuY3Rpb24oKSB7fTsKCiAgICAgICAgdmFyIHByb2ZpbGVyU3RvcmFnZUtleSA9ICdzeW1mb255L3Byb2ZpbGVyLyc7CgogICAgICAgIHZhciBhZGRFdmVudExpc3RlbmVyOwoKICAgICAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICBpZiAoISgnYWRkRXZlbnRMaXN0ZW5lcicgaW4gZWwpKSB7CiAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAoZWxlbWVudCwgZXZlbnROYW1lLCBjYWxsYmFjaykgewogICAgICAgICAgICAgICAgZWxlbWVudC5hdHRhY2hFdmVudCgnb24nICsgZXZlbnROYW1lLCBjYWxsYmFjayk7CiAgICAgICAgICAgIH07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIChlbGVtZW50LCBldmVudE5hbWUsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBjYWxsYmFjaywgZmFsc2UpOwogICAgICAgICAgICB9OwogICAgICAgIH0KCiAgICAgICAgaWYgKG5hdmlnYXRvci5jbGlwYm9hcmQpIHsKICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtY2xpcGJvYXJkLXRleHRdJykuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50KSB7CiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhlbGVtZW50LCAnaGlkZGVuJyk7CiAgICAgICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY2xpcGJvYXJkLXRleHQnKSk7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIHZhciByZXF1ZXN0ID0gZnVuY3Rpb24odXJsLCBvblN1Y2Nlc3MsIG9uRXJyb3IsIHBheWxvYWQsIG9wdGlvbnMsIHRyaWVzKSB7CiAgICAgICAgICAgIHZhciB4aHIgPSB3aW5kb3cuWE1MSHR0cFJlcXVlc3QgPyBuZXcgWE1MSHR0cFJlcXVlc3QoKSA6IG5ldyBBY3RpdmVYT2JqZWN0KCdNaWNyb3NvZnQuWE1MSFRUUCcpOwogICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKICAgICAgICAgICAgb3B0aW9ucy5yZXRyeSA9IG9wdGlvbnMucmV0cnkgfHwgZmFsc2U7CiAgICAgICAgICAgIHRyaWVzID0gdHJpZXMgfHwgMTsKICAgICAgICAgICAgLyogdGhpcyBkZWxheXMgZm9yIDEyNSwgMzc1LCA2MjUsIDg3NSwgYW5kIDEwMDAsIC4uLiAqLwogICAgICAgICAgICB2YXIgZGVsYXkgPSB0cmllcyA8IDUgPyAodHJpZXMgLSAwLjUpICogMjUwIDogMTAwMDsKCiAgICAgICAgICAgIHhoci5vcGVuKG9wdGlvbnMubWV0aG9kIHx8ICdHRVQnLCB1cmwsIHRydWUpOwogICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignWC1SZXF1ZXN0ZWQtV2l0aCcsICdYTUxIdHRwUmVxdWVzdCcpOwogICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oc3RhdGUpIHsKICAgICAgICAgICAgICAgIGlmICg0ICE9PSB4aHIucmVhZHlTdGF0ZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09IDQwNCAmJiBvcHRpb25zLnJldHJ5ICYmICFvcHRpb25zLnN0b3ApIHsKICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zdG9wKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdCh1cmwsIG9uU3VjY2Vzcywgb25FcnJvciwgcGF5bG9hZCwgb3B0aW9ucywgdHJpZXMgKyAxKTsKICAgICAgICAgICAgICAgICAgICB9LCBkZWxheSk7CgogICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICgyMDAgPT09IHhoci5zdGF0dXMpIHsKICAgICAgICAgICAgICAgICAgICAob25TdWNjZXNzIHx8IG5vb3ApKHhocik7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIChvbkVycm9yIHx8IG5vb3ApKHhocik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CgogICAgICAgICAgICBpZiAob3B0aW9ucy5vblNlbmQpIHsKICAgICAgICAgICAgICAgIG9wdGlvbnMub25TZW5kKHRyaWVzKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgeGhyLnNlbmQocGF5bG9hZCB8fCAnJyk7CiAgICAgICAgfTsKCiAgICAgICAgdmFyIGdldFByZWZlcmVuY2UgPSBmdW5jdGlvbihuYW1lKSB7CiAgICAgICAgICAgIGlmICghd2luZG93LmxvY2FsU3RvcmFnZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShwcm9maWxlclN0b3JhZ2VLZXkgKyBuYW1lKTsKICAgICAgICB9OwoKICAgICAgICB2YXIgc2V0UHJlZmVyZW5jZSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7CiAgICAgICAgICAgIGlmICghd2luZG93LmxvY2FsU3RvcmFnZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHByb2ZpbGVyU3RvcmFnZUtleSArIG5hbWUsIHZhbHVlKTsKICAgICAgICB9OwoKICAgICAgICB2YXIgcmVxdWVzdFN0YWNrID0gW107CgogICAgICAgIHZhciBleHRyYWN0SGVhZGVycyA9IGZ1bmN0aW9uKHhociwgc3RhY2tFbGVtZW50KSB7CiAgICAgICAgICAgIC8qIEhlcmUgd2UgYXZvaWQgdG8gY2FsbCB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIgaW4gb3JkZXIgdG8gKi8KICAgICAgICAgICAgLyogcHJldmVudCBwb2xsdXRpbmcgdGhlIGNvbnNvbGUgd2l0aCBDT1JTIHNlY3VyaXR5IGVycm9ycyAqLwogICAgICAgICAgICB2YXIgYWxsSGVhZGVycyA9IHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKTsKICAgICAgICAgICAgdmFyIHJldDsKCiAgICAgICAgICAgIGlmIChyZXQgPSBhbGxIZWFkZXJzLm1hdGNoKC9eeC1kZWJ1Zy10b2tlbjpcXHMrKC4qKVwkL2ltKSkgewogICAgICAgICAgICAgICAgc3RhY2tFbGVtZW50LnByb2ZpbGUgPSByZXRbMV07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHJldCA9IGFsbEhlYWRlcnMubWF0Y2goL154LWRlYnVnLXRva2VuLWxpbms6XFxzKyguKilcJC9pbSkpIHsKICAgICAgICAgICAgICAgIHN0YWNrRWxlbWVudC5wcm9maWxlclVybCA9IHJldFsxXTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocmV0ID0gYWxsSGVhZGVycy5tYXRjaCgvXlN5bWZvbnktRGVidWctVG9vbGJhci1SZXBsYWNlOlxccysoLiopXCQvaW0pKSB7CiAgICAgICAgICAgICAgICBzdGFja0VsZW1lbnQudG9vbGJhclJlcGxhY2VGaW5pc2hlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgc3RhY2tFbGVtZW50LnRvb2xiYXJSZXBsYWNlID0gJzEnID09PSByZXRbMV07CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICB2YXIgc3VjY2Vzc1N0cmVhayA9IDQ7CiAgICAgICAgdmFyIHBlbmRpbmdSZXF1ZXN0cyA9IDA7CiAgICAgICAgdmFyIHJlbmRlckFqYXhSZXF1ZXN0cyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB2YXIgcmVxdWVzdENvdW50ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2YtdG9vbGJhci1hamF4LXJlcXVlc3QtY291bnRlcicpOwogICAgICAgICAgICBpZiAoIXJlcXVlc3RDb3VudGVyKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmVxdWVzdENvdW50ZXIudGV4dENvbnRlbnQgPSByZXF1ZXN0U3RhY2subGVuZ3RoOwoKICAgICAgICAgICAgdmFyIGluZm9TcGFuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zZi10b29sYmFyLWFqYXgtaW5mb1wiKTsKICAgICAgICAgICAgaWYgKGluZm9TcGFuKSB7CiAgICAgICAgICAgICAgICBpbmZvU3Bhbi50ZXh0Q29udGVudCA9IHJlcXVlc3RTdGFjay5sZW5ndGggKyAnIEFKQVggcmVxdWVzdCcgKyAocmVxdWVzdFN0YWNrLmxlbmd0aCAhPT0gMSA/ICdzJyA6ICcnKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGFqYXhUb29sYmFyUGFuZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2YtdG9vbGJhci1ibG9jay1hamF4Jyk7CiAgICAgICAgICAgIGlmIChyZXF1ZXN0U3RhY2subGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBhamF4VG9vbGJhclBhbmVsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgYWpheFRvb2xiYXJQYW5lbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChwZW5kaW5nUmVxdWVzdHMgPiAwKSB7CiAgICAgICAgICAgICAgICBhZGRDbGFzcyhhamF4VG9vbGJhclBhbmVsLCAnc2YtYWpheC1yZXF1ZXN0LWxvYWRpbmcnKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChzdWNjZXNzU3RyZWFrIDwgNCkgewogICAgICAgICAgICAgICAgYWRkQ2xhc3MoYWpheFRvb2xiYXJQYW5lbCwgJ3NmLXRvb2xiYXItc3RhdHVzLXJlZCcpOwogICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoYWpheFRvb2xiYXJQYW5lbCwgJ3NmLWFqYXgtcmVxdWVzdC1sb2FkaW5nJyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhhamF4VG9vbGJhclBhbmVsLCAnc2YtYWpheC1yZXF1ZXN0LWxvYWRpbmcnKTsKICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKGFqYXhUb29sYmFyUGFuZWwsICdzZi10b29sYmFyLXN0YXR1cy1yZWQnKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIHZhciBzdGFydEFqYXhSZXF1ZXN0ID0gZnVuY3Rpb24oaW5kZXgpIHsKICAgICAgICAgICAgdmFyIHRib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNmLXRvb2xiYXItYWpheC1yZXF1ZXN0LWxpc3QnKTsKICAgICAgICAgICAgaWYgKCF0Ym9keSkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgbmJPZkFqYXhSZXF1ZXN0ID0gdGJvZHkucm93cy5sZW5ndGg7CiAgICAgICAgICAgIGlmIChuYk9mQWpheFJlcXVlc3QgPj0gMTAwKSB7CiAgICAgICAgICAgICAgICB0Ym9keS5kZWxldGVSb3coMCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciByZXF1ZXN0ID0gcmVxdWVzdFN0YWNrW2luZGV4XTsKICAgICAgICAgICAgcGVuZGluZ1JlcXVlc3RzKys7CiAgICAgICAgICAgIHZhciByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpOwogICAgICAgICAgICByZXF1ZXN0LkRPTU5vZGUgPSByb3c7CgogICAgICAgICAgICB2YXIgcmVxdWVzdE51bWJlckNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpOwogICAgICAgICAgICByZXF1ZXN0TnVtYmVyQ2VsbC50ZXh0Q29udGVudCA9IGluZGV4ICsgMTsKICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKHJlcXVlc3ROdW1iZXJDZWxsKTsKCiAgICAgICAgICAgIHZhciBwcm9maWxlckNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpOwogICAgICAgICAgICBwcm9maWxlckNlbGwudGV4dENvbnRlbnQgPSAnbi9hJzsKICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKHByb2ZpbGVyQ2VsbCk7CgogICAgICAgICAgICB2YXIgbWV0aG9kQ2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7CiAgICAgICAgICAgIG1ldGhvZENlbGwudGV4dENvbnRlbnQgPSByZXF1ZXN0Lm1ldGhvZDsKICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKG1ldGhvZENlbGwpOwoKICAgICAgICAgICAgdmFyIHR5cGVDZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTsKICAgICAgICAgICAgdHlwZUNlbGwudGV4dENvbnRlbnQgPSByZXF1ZXN0LnR5cGU7CiAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZCh0eXBlQ2VsbCk7CgogICAgICAgICAgICB2YXIgc3RhdHVzQ29kZUNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpOwogICAgICAgICAgICB2YXIgc3RhdHVzQ29kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTsKICAgICAgICAgICAgc3RhdHVzQ29kZS50ZXh0Q29udGVudCA9ICduL2EnOwogICAgICAgICAgICBzdGF0dXNDb2RlQ2VsbC5hcHBlbmRDaGlsZChzdGF0dXNDb2RlKTsKICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKHN0YXR1c0NvZGVDZWxsKTsKCiAgICAgICAgICAgIHZhciBwYXRoQ2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7CiAgICAgICAgICAgIHBhdGhDZWxsLmNsYXNzTmFtZSA9ICdzZi1hamF4LXJlcXVlc3QtdXJsJzsKICAgICAgICAgICAgaWYgKCdHRVQnID09PSByZXF1ZXN0Lm1ldGhvZCkgewogICAgICAgICAgICAgICAgdmFyIHBhdGhMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOwogICAgICAgICAgICAgICAgcGF0aExpbmsuc2V0QXR0cmlidXRlKCdocmVmJywgcmVxdWVzdC51cmwpOwogICAgICAgICAgICAgICAgcGF0aExpbmsudGV4dENvbnRlbnQgPSByZXF1ZXN0LnVybDsKICAgICAgICAgICAgICAgIHBhdGhDZWxsLmFwcGVuZENoaWxkKHBhdGhMaW5rKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHBhdGhDZWxsLnRleHRDb250ZW50ID0gcmVxdWVzdC51cmw7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGF0aENlbGwuc2V0QXR0cmlidXRlKCd0aXRsZScsIHJlcXVlc3QudXJsKTsKICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKHBhdGhDZWxsKTsKCiAgICAgICAgICAgIHZhciBkdXJhdGlvbkNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpOwogICAgICAgICAgICBkdXJhdGlvbkNlbGwuY2xhc3NOYW1lID0gJ3NmLWFqYXgtcmVxdWVzdC1kdXJhdGlvbic7CiAgICAgICAgICAgIGR1cmF0aW9uQ2VsbC50ZXh0Q29udGVudCA9ICduL2EnOwogICAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQoZHVyYXRpb25DZWxsKTsKCiAgICAgICAgICAgIHJlcXVlc3QubGl2ZUR1cmF0aW9uSGFuZGxlID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBkdXJhdGlvbkNlbGwudGV4dENvbnRlbnQgPSAobmV3IERhdGUoKSAtIHJlcXVlc3Quc3RhcnQpICsgJyBtcyc7CiAgICAgICAgICAgIH0sIDEwMCk7CgogICAgICAgICAgICByb3cuY2xhc3NOYW1lID0gJ3NmLWFqYXgtcmVxdWVzdCBzZi1hamF4LXJlcXVlc3QtbG9hZGluZyc7CiAgICAgICAgICAgIHRib2R5Lmluc2VydEJlZm9yZShyb3csIG51bGwpOwoKICAgICAgICAgICAgdmFyIHRvb2xiYXJJbmZvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNmLXRvb2xiYXItYmxvY2stYWpheCAuc2YtdG9vbGJhci1pbmZvJyk7CiAgICAgICAgICAgIHRvb2xiYXJJbmZvLnNjcm9sbFRvcCA9IHRvb2xiYXJJbmZvLnNjcm9sbEhlaWdodDsKCiAgICAgICAgICAgIHJlbmRlckFqYXhSZXF1ZXN0cygpOwogICAgICAgIH07CgogICAgICAgIHZhciBmaW5pc2hBamF4UmVxdWVzdCA9IGZ1bmN0aW9uKGluZGV4KSB7CiAgICAgICAgICAgIHZhciByZXF1ZXN0ID0gcmVxdWVzdFN0YWNrW2luZGV4XTsKICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChyZXF1ZXN0LmxpdmVEdXJhdGlvbkhhbmRsZSk7CgogICAgICAgICAgICBpZiAoIXJlcXVlc3QuRE9NTm9kZSkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAocmVxdWVzdC50b29sYmFyUmVwbGFjZSAmJiAhcmVxdWVzdC50b29sYmFyUmVwbGFjZUZpbmlzaGVkICYmIHJlcXVlc3QucHJvZmlsZSkgewogICAgICAgICAgICAgICAgLyogRmxhZyBhcyBjb21wbGV0ZSBiZWNhdXNlIGZpbmlzaEFqYXhSZXF1ZXN0IGNhbiBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXMuICovCiAgICAgICAgICAgICAgICByZXF1ZXN0LnRvb2xiYXJSZXBsYWNlRmluaXNoZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgLyogU2VhcmNoIHVwIHRocm91Z2ggdGhlIERPTSB0byBmaW5kIHRoZSB0b29sYmFyJ3MgY29udGFpbmVyIElELiAqLwogICAgICAgICAgICAgICAgZm9yICh2YXIgZWxlbSA9IHJlcXVlc3QuRE9NTm9kZTsgZWxlbSAmJiBlbGVtICE9PSBkb2N1bWVudDsgZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgewogICAgICAgICAgICAgICAgICAgIGlmIChlbGVtLmlkLm1hdGNoKC9ec2Z3ZHQvKSkgewogICAgICAgICAgICAgICAgICAgICAgICBTZmpzLmxvYWRUb29sYmFyKGVsZW0uaWQucmVwbGFjZSgvXnNmd2R0LywgJycpLCByZXF1ZXN0LnByb2ZpbGUpOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHBlbmRpbmdSZXF1ZXN0cy0tOwogICAgICAgICAgICB2YXIgcm93ID0gcmVxdWVzdC5ET01Ob2RlOwogICAgICAgICAgICAvKiBVbnBhY2sgdGhlIGNoaWxkcmVuIGZyb20gdGhlIHJvdyAqLwogICAgICAgICAgICB2YXIgcHJvZmlsZXJDZWxsID0gcm93LmNoaWxkcmVuWzFdOwogICAgICAgICAgICB2YXIgbWV0aG9kQ2VsbCA9IHJvdy5jaGlsZHJlblsyXTsKICAgICAgICAgICAgdmFyIHN0YXR1c0NvZGVDZWxsID0gcm93LmNoaWxkcmVuWzRdOwogICAgICAgICAgICB2YXIgc3RhdHVzQ29kZUVsZW0gPSBzdGF0dXNDb2RlQ2VsbC5jaGlsZHJlblswXTsKICAgICAgICAgICAgdmFyIGR1cmF0aW9uQ2VsbCA9IHJvdy5jaGlsZHJlbls2XTsKCiAgICAgICAgICAgIGlmIChyZXF1ZXN0LmVycm9yKSB7CiAgICAgICAgICAgICAgICByb3cuY2xhc3NOYW1lID0gJ3NmLWFqYXgtcmVxdWVzdCBzZi1hamF4LXJlcXVlc3QtZXJyb3InOwogICAgICAgICAgICAgICAgbWV0aG9kQ2VsbC5jbGFzc05hbWUgPSAnc2YtYWpheC1yZXF1ZXN0LWVycm9yJzsKICAgICAgICAgICAgICAgIHN1Y2Nlc3NTdHJlYWsgPSAwOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcm93LmNsYXNzTmFtZSA9ICdzZi1hamF4LXJlcXVlc3Qgc2YtYWpheC1yZXF1ZXN0LW9rJzsKICAgICAgICAgICAgICAgIHN1Y2Nlc3NTdHJlYWsrKzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzQ29kZSkgewogICAgICAgICAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzQ29kZSA8IDMwMCkgewogICAgICAgICAgICAgICAgICAgIHN0YXR1c0NvZGVFbGVtLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnc2YtdG9vbGJhci1zdGF0dXMnKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVxdWVzdC5zdGF0dXNDb2RlIDwgNDAwKSB7CiAgICAgICAgICAgICAgICAgICAgc3RhdHVzQ29kZUVsZW0uc2V0QXR0cmlidXRlKCdjbGFzcycsICdzZi10b29sYmFyLXN0YXR1cyBzZi10b29sYmFyLXN0YXR1cy15ZWxsb3cnKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgc3RhdHVzQ29kZUVsZW0uc2V0QXR0cmlidXRlKCdjbGFzcycsICdzZi10b29sYmFyLXN0YXR1cyBzZi10b29sYmFyLXN0YXR1cy1yZWQnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0YXR1c0NvZGVFbGVtLnRleHRDb250ZW50ID0gcmVxdWVzdC5zdGF0dXNDb2RlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgc3RhdHVzQ29kZUVsZW0uc2V0QXR0cmlidXRlKCdjbGFzcycsICdzZi10b29sYmFyLXN0YXR1cyBzZi10b29sYmFyLXN0YXR1cy1yZWQnKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHJlcXVlc3QuZHVyYXRpb24pIHsKICAgICAgICAgICAgICAgIGR1cmF0aW9uQ2VsbC50ZXh0Q29udGVudCA9IHJlcXVlc3QuZHVyYXRpb24gKyAnIG1zJzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHJlcXVlc3QucHJvZmlsZXJVcmwpIHsKICAgICAgICAgICAgICAgIHByb2ZpbGVyQ2VsbC50ZXh0Q29udGVudCA9ICcnOwogICAgICAgICAgICAgICAgdmFyIHByb2ZpbGVyTGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKICAgICAgICAgICAgICAgIHByb2ZpbGVyTGluay5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCByZXF1ZXN0LnByb2ZpbGVyVXJsKTsKICAgICAgICAgICAgICAgIHByb2ZpbGVyTGluay50ZXh0Q29udGVudCA9IHJlcXVlc3QucHJvZmlsZTsKICAgICAgICAgICAgICAgIHByb2ZpbGVyQ2VsbC5hcHBlbmRDaGlsZChwcm9maWxlckxpbmspOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZW5kZXJBamF4UmVxdWVzdHMoKTsKICAgICAgICB9OwoKICAgICAgICAiOwogICAgICAgIC8vIGxpbmUgMjkyCiAgICAgICAgaWYgKGFycmF5X2tleV9leGlzdHMoImV4Y2x1ZGVkX2FqYXhfcGF0aHMiLCAkY29udGV4dCkpIHsKICAgICAgICAgICAgLy8gbGluZSAyOTMKICAgICAgICAgICAgZWNobyAiICAgICAgICAgICAgaWYgKHdpbmRvdy5mZXRjaCAmJiB3aW5kb3cuZmV0Y2gucG9seWZpbGwgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgdmFyIG9sZEZldGNoID0gd2luZG93LmZldGNoOwogICAgICAgICAgICAgICAgd2luZG93LmZldGNoID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIHZhciBwcm9taXNlID0gb2xkRmV0Y2guYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gYXJndW1lbnRzWzBdOwogICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHNbMV07CiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmFtVHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudHNbMF0pOwogICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbVR5cGUgPT09ICdbb2JqZWN0IFJlcXVlc3RdJykgewogICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSBhcmd1bWVudHNbMF0udXJsOwogICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IGFyZ3VtZW50c1swXS5tZXRob2QsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVkZW50aWFsczogYXJndW1lbnRzWzBdLmNyZWRlbnRpYWxzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogYXJndW1lbnRzWzBdLmhlYWRlcnMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlOiBhcmd1bWVudHNbMF0ubW9kZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0OiBhcmd1bWVudHNbMF0ucmVkaXJlY3QKICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSBTdHJpbmcodXJsKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKCF1cmwubWF0Y2gobmV3IFJlZ0V4cCgiOwogICAgICAgICAgICAvLyBsaW5lIDMxMgogICAgICAgICAgICBlY2hvIGpzb25fZW5jb2RlKChpc3NldCgkY29udGV4dFsiZXhjbHVkZWRfYWpheF9wYXRocyJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJleGNsdWRlZF9hamF4X3BhdGhzIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImV4Y2x1ZGVkX2FqYXhfcGF0aHMiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJleGNsdWRlZF9hamF4X3BhdGhzIiBkb2VzIG5vdCBleGlzdC4nLCAzMTIsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSk7CiAgICAgICAgICAgIGVjaG8gIikpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXRob2QgPSAnR0VUJzsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtcyAmJiBwYXJhbXMubWV0aG9kICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZCA9IHBhcmFtcy5tZXRob2Q7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGFja0VsZW1lbnQgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHVybCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2ZldGNoJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBuZXcgRGF0ZSgpCiAgICAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWR4ID0gcmVxdWVzdFN0YWNrLnB1c2goc3RhY2tFbGVtZW50KSAtIDE7CiAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbiAocikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2tFbGVtZW50LmR1cmF0aW9uID0gbmV3IERhdGUoKSAtIHN0YWNrRWxlbWVudC5zdGFydDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrRWxlbWVudC5lcnJvciA9IHIuc3RhdHVzIDwgMjAwIHx8IHIuc3RhdHVzID49IDQwMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrRWxlbWVudC5zdGF0dXNDb2RlID0gci5zdGF0dXM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFja0VsZW1lbnQucHJvZmlsZSA9IHIuaGVhZGVycy5nZXQoJ3gtZGVidWctdG9rZW4nKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrRWxlbWVudC5wcm9maWxlclVybCA9IHIuaGVhZGVycy5nZXQoJ3gtZGVidWctdG9rZW4tbGluaycpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2tFbGVtZW50LnRvb2xiYXJSZXBsYWNlRmluaXNoZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrRWxlbWVudC50b29sYmFyUmVwbGFjZSA9ICcxJyA9PT0gci5oZWFkZXJzLmdldCgnU3ltZm9ueS1EZWJ1Zy1Ub29sYmFyLVJlcGxhY2UnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmlzaEFqYXhSZXF1ZXN0KGlkeCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrRWxlbWVudC5lcnJvciA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5pc2hBamF4UmVxdWVzdChpZHgpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRBamF4UmVxdWVzdChpZHgpOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2U7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh3aW5kb3cuWE1MSHR0cFJlcXVlc3QgJiYgWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIpIHsKICAgICAgICAgICAgICAgIHZhciBwcm94aWVkID0gWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLm9wZW47CgogICAgICAgICAgICAgICAgWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbihtZXRob2QsIHVybCwgYXN5bmMsIHVzZXIsIHBhc3MpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CgogICAgICAgICAgICAgICAgICAgIC8qIHByZXZlbnQgbG9nZ2luZyBBSkFYIGNhbGxzIHRvIHN0YXRpYyBhbmQgaW5saW5lIGZpbGVzLCBsaWtlIHRlbXBsYXRlcyAqLwogICAgICAgICAgICAgICAgICAgIHZhciBwYXRoID0gdXJsOwogICAgICAgICAgICAgICAgICAgIGlmICh1cmwuc2xpY2UoMCwgMSkgPT09ICcvJykgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gdXJsLmluZGV4T2YoJyI7CiAgICAgICAgICAgIC8vIGxpbmUgMzU1CiAgICAgICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJyZXF1ZXN0Il0pIHx8IGFycmF5X2tleV9leGlzdHMoInJlcXVlc3QiLCAkY29udGV4dCkgPyAkY29udGV4dFsicmVxdWVzdCJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgInJlcXVlc3QiIGRvZXMgbm90IGV4aXN0LicsIDM1NSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiYmFzZVBhdGgiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDM1NSksICJqcyIpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICBlY2hvICInKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aCA9IHVybC5zbGljZSgiOwogICAgICAgICAgICAvLyBsaW5lIDM1NgogICAgICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCB0d2lnX2xlbmd0aF9maWx0ZXIoJHRoaXMtPmVudiwgdHdpZ19nZXRfYXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsicmVxdWVzdCJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJyZXF1ZXN0IiwgJGNvbnRleHQpID8gJGNvbnRleHRbInJlcXVlc3QiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJyZXF1ZXN0IiBkb2VzIG5vdCBleGlzdC4nLCAzNTYsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImJhc2VQYXRoIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAzNTYpKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgZWNobyAiKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgwID09PSB1cmwuaW5kZXhPZignIjsKICAgICAgICAgICAgLy8gbGluZSAzNTkKICAgICAgICAgICAgZWNobyB0d2lnX2VzY2FwZV9maWx0ZXIoJHRoaXMtPmVudiwgdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsICh0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJyZXF1ZXN0Il0pIHx8IGFycmF5X2tleV9leGlzdHMoInJlcXVlc3QiLCAkY29udGV4dCkgPyAkY29udGV4dFsicmVxdWVzdCJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgInJlcXVlc3QiIGRvZXMgbm90IGV4aXN0LicsIDM1OSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAic2NoZW1lQW5kSHR0cEhvc3QiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDM1OSkgLiB0d2lnX2dldF9hdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJyZXF1ZXN0Il0pIHx8IGFycmF5X2tleV9leGlzdHMoInJlcXVlc3QiLCAkY29udGV4dCkgPyAkY29udGV4dFsicmVxdWVzdCJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgInJlcXVlc3QiIGRvZXMgbm90IGV4aXN0LicsIDM1OSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiYmFzZVBhdGgiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDM1OSkpLCAianMiKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgZWNobyAiJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcGF0aCA9IHVybC5zbGljZSgiOwogICAgICAgICAgICAvLyBsaW5lIDM2MAogICAgICAgICAgICBlY2hvIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCB0d2lnX2xlbmd0aF9maWx0ZXIoJHRoaXMtPmVudiwgKHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbInJlcXVlc3QiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygicmVxdWVzdCIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJyZXF1ZXN0Il0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAicmVxdWVzdCIgZG9lcyBub3QgZXhpc3QuJywgMzYwLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJzY2hlbWVBbmRIdHRwSG9zdCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzYwKSAuIHR3aWdfZ2V0X2F0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbInJlcXVlc3QiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygicmVxdWVzdCIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJyZXF1ZXN0Il0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAicmVxdWVzdCIgZG9lcyBub3QgZXhpc3QuJywgMzYwLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJiYXNlUGF0aCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzYwKSkpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICBlY2hvICIpOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYgKCFwYXRoLm1hdGNoKG5ldyBSZWdFeHAoIjsKICAgICAgICAgICAgLy8gbGluZSAzNjMKICAgICAgICAgICAgZWNobyBqc29uX2VuY29kZSgoaXNzZXQoJGNvbnRleHRbImV4Y2x1ZGVkX2FqYXhfcGF0aHMiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiZXhjbHVkZWRfYWpheF9wYXRocyIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJleGNsdWRlZF9hamF4X3BhdGhzIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiZXhjbHVkZWRfYWpheF9wYXRocyIgZG9lcyBub3QgZXhpc3QuJywgMzYzLCAkdGhpcy0+c291cmNlKTsgfSkoKSkpOwogICAgICAgICAgICBlY2hvICIpKSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhY2tFbGVtZW50ID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd4aHInLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IG5ldyBEYXRlKCkKICAgICAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpZHggPSByZXF1ZXN0U3RhY2sucHVzaChzdGFja0VsZW1lbnQpIC0gMTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigncmVhZHlzdGF0ZWNoYW5nZScsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYucmVhZHlTdGF0ZSA9PSA0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2tFbGVtZW50LmR1cmF0aW9uID0gbmV3IERhdGUoKSAtIHN0YWNrRWxlbWVudC5zdGFydDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFja0VsZW1lbnQuZXJyb3IgPSBzZWxmLnN0YXR1cyA8IDIwMCB8fCBzZWxmLnN0YXR1cyA+PSA0MDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2tFbGVtZW50LnN0YXR1c0NvZGUgPSBzZWxmLnN0YXR1czsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYWN0SGVhZGVycyhzZWxmLCBzdGFja0VsZW1lbnQpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5pc2hBamF4UmVxdWVzdChpZHgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LCBmYWxzZSk7CgogICAgICAgICAgICAgICAgICAgICAgICBzdGFydEFqYXhSZXF1ZXN0KGlkeCk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBwcm94aWVkLmFwcGx5KHRoaXMsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICI7CiAgICAgICAgfQogICAgICAgIC8vIGxpbmUgMzkyCiAgICAgICAgZWNobyAiCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgaGFzQ2xhc3M6IGhhc0NsYXNzLAoKICAgICAgICAgICAgcmVtb3ZlQ2xhc3M6IHJlbW92ZUNsYXNzLAoKICAgICAgICAgICAgYWRkQ2xhc3M6IGFkZENsYXNzLAoKICAgICAgICAgICAgdG9nZ2xlQ2xhc3M6IHRvZ2dsZUNsYXNzLAoKICAgICAgICAgICAgZ2V0UHJlZmVyZW5jZTogZ2V0UHJlZmVyZW5jZSwKCiAgICAgICAgICAgIHNldFByZWZlcmVuY2U6IHNldFByZWZlcmVuY2UsCgogICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyOiBhZGRFdmVudExpc3RlbmVyLAoKICAgICAgICAgICAgcmVxdWVzdDogcmVxdWVzdCwKCiAgICAgICAgICAgIHJlbmRlckFqYXhSZXF1ZXN0czogcmVuZGVyQWpheFJlcXVlc3RzLAoKICAgICAgICAgICAgZ2V0U2Z3ZHQ6IGZ1bmN0aW9uKHRva2VuKSB7CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc2Z3ZHQpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnNmd2R0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Nmd2R0JyArIHRva2VuKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZndkdDsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uKHNlbGVjdG9yLCB1cmwsIG9uU3VjY2Vzcywgb25FcnJvciwgb3B0aW9ucykgewogICAgICAgICAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc2VsZWN0b3IpOwoKICAgICAgICAgICAgICAgIGlmIChlbCAmJiBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2Z1cmwnKSAhPT0gdXJsKSB7CiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdCgKICAgICAgICAgICAgICAgICAgICAgICAgdXJsLAogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbih4aHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLmlubmVySFRNTCA9IHhoci5yZXNwb25zZVRleHQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc2Z1cmwnLCB1cmwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoZWwsICdsb2FkaW5nJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGVuZGluZyA9IHBlbmRpbmdSZXF1ZXN0czsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVxdWVzdFN0YWNrLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRBamF4UmVxdWVzdChpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdFN0YWNrW2ldLmR1cmF0aW9uKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmlzaEFqYXhSZXF1ZXN0KGkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFJldmVydCB0aGUgcGVuZGluZyBzdGF0ZSBpbiBjYXNlIHRoZXJlIHdhcyBhIHN0YXJ0IGNhbGxlZCB3aXRob3V0IGEgZmluaXNoIGFib3ZlLiAqLwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVuZGluZ1JlcXVlc3RzID0gcGVuZGluZzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvblN1Y2Nlc3MgfHwgbm9vcCkoeGhyLCBlbCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHhocikgeyAob25FcnJvciB8fCBub29wKSh4aHIsIGVsKTsgfSwKICAgICAgICAgICAgICAgICAgICAgICAgJycsCiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMKICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgc2hvd1Rvb2xiYXI6IGZ1bmN0aW9uKHRva2VuKSB7CiAgICAgICAgICAgICAgICB2YXIgc2Z3ZHQgPSB0aGlzLmdldFNmd2R0KHRva2VuKTsKICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHNmd2R0LCAnc2YtZGlzcGxheS1ub25lJyk7CgogICAgICAgICAgICAgICAgaWYgKGdldFByZWZlcmVuY2UoJ3Rvb2xiYXIvZGlzcGxheVN0YXRlJykgPT0gJ25vbmUnKSB7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NmVG9vbGJhck1haW5Db250ZW50LScgKyB0b2tlbikuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2ZUb29sYmFyQ2xlYXJlci0nICsgdG9rZW4pLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NmTWluaVRvb2xiYXItJyArIHRva2VuKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NmVG9vbGJhck1haW5Db250ZW50LScgKyB0b2tlbikuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NmVG9vbGJhckNsZWFyZXItJyArIHRva2VuKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2ZNaW5pVG9vbGJhci0nICsgdG9rZW4pLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBoaWRlVG9vbGJhcjogZnVuY3Rpb24odG9rZW4pIHsKICAgICAgICAgICAgICAgIHZhciBzZndkdCA9IHRoaXMuZ2V0U2Z3ZHQodG9rZW4pOwogICAgICAgICAgICAgICAgYWRkQ2xhc3Moc2Z3ZHQsICdzZi1kaXNwbGF5LW5vbmUnKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGluaXRUb29sYmFyOiBmdW5jdGlvbih0b2tlbikgewogICAgICAgICAgICAgICAgdGhpcy5zaG93VG9vbGJhcih0b2tlbik7CgogICAgICAgICAgICAgICAgdmFyIGhpZGVCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2ZUb29sYmFySGlkZUJ1dHRvbi0nICsgdG9rZW4pOwogICAgICAgICAgICAgICAgdmFyIGhpZGVCdXR0b25TdmcgPSBoaWRlQnV0dG9uLnF1ZXJ5U2VsZWN0b3IoJ3N2ZycpOwogICAgICAgICAgICAgICAgaGlkZUJ1dHRvblN2Zy5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTsKICAgICAgICAgICAgICAgIGhpZGVCdXR0b25Tdmcuc2V0QXR0cmlidXRlKCdmb2N1c2FibGUnLCAnZmFsc2UnKTsKICAgICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoaGlkZUJ1dHRvbiwgJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKCiAgICAgICAgICAgICAgICAgICAgdmFyIHAgPSB0aGlzLnBhcmVudE5vZGU7CiAgICAgICAgICAgICAgICAgICAgcC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgIChwLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgfHwgcC5wcmV2aW91c1NpYmxpbmcpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NmTWluaVRvb2xiYXItJyArIHRva2VuKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgICAgICAgICAgICAgICAgICBzZXRQcmVmZXJlbmNlKCd0b29sYmFyL2Rpc3BsYXlTdGF0ZScsICdub25lJyk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICB2YXIgc2hvd0J1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZlRvb2xiYXJNaW5pVG9nZ2xlci0nICsgdG9rZW4pOwogICAgICAgICAgICAgICAgdmFyIHNob3dCdXR0b25TdmcgPSBzaG93QnV0dG9uLnF1ZXJ5U2VsZWN0b3IoJ3N2ZycpOwogICAgICAgICAgICAgICAgc2hvd0J1dHRvblN2Zy5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTsKICAgICAgICAgICAgICAgIHNob3dCdXR0b25Tdmcuc2V0QXR0cmlidXRlKCdmb2N1c2FibGUnLCAnZmFsc2UnKTsKICAgICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoc2hvd0J1dHRvbiwgJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKCiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW0gPSB0aGlzLnBhcmVudE5vZGU7CiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW0uc3R5bGUuZGlzcGxheSA9PSAnbm9uZScpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NmVG9vbGJhck1haW5Db250ZW50LScgKyB0b2tlbikuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NmVG9vbGJhckNsZWFyZXItJyArIHRva2VuKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgICAgICBlbGVtLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZlRvb2xiYXJNYWluQ29udGVudC0nICsgdG9rZW4pLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2ZUb29sYmFyQ2xlYXJlci0nICsgdG9rZW4pLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgICAgICAgICAgICAgICAgICAgICBlbGVtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZScKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHNldFByZWZlcmVuY2UoJ3Rvb2xiYXIvZGlzcGxheVN0YXRlJywgJ2Jsb2NrJyk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGxvYWRUb29sYmFyOiBmdW5jdGlvbih0b2tlbiwgbmV3VG9rZW4pIHsKICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpczsKICAgICAgICAgICAgICAgIHZhciB0cmllc0NvdW50ZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2ZMb2FkQ291bnRlci0nICsgdG9rZW4pOwoKICAgICAgICAgICAgICAgIHZhciBvcHRpb25zID0gewogICAgICAgICAgICAgICAgICAgIHJldHJ5OiB0cnVlLAogICAgICAgICAgICAgICAgICAgIG9uU2VuZDogZnVuY3Rpb24gKGNvdW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3VudCA9PT0gMykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5pbml0VG9vbGJhcih0b2tlbik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmllc0NvdW50ZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyaWVzQ291bnRlci50ZXh0Q29udGVudCA9IGNvdW50OwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgdmFyIGNhbmNlbEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZkxvYWRDYW5jZWwtJyArIHRva2VuKTsKICAgICAgICAgICAgICAgIGlmIChjYW5jZWxCdXR0b24pIHsKICAgICAgICAgICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKGNhbmNlbEJ1dHRvbiwgJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgogICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnN0b3AgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmhpZGVUb29sYmFyKHRva2VuKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBuZXdUb2tlbiA9IChuZXdUb2tlbiB8fCB0b2tlbik7CgogICAgICAgICAgICAgICAgdGhpcy5sb2FkKAogICAgICAgICAgICAgICAgICAgICdzZndkdCcgKyB0b2tlbiwKICAgICAgICAgICAgICAgICAgICAnIjsKICAgICAgICAvLyBsaW5lIDU0MAogICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCAkdGhpcy0+ZXh0ZW5zaW9uc1snU3ltZm9ueVxCcmlkZ2VcVHdpZ1xFeHRlbnNpb25cUm91dGluZ0V4dGVuc2lvbiddLT5nZXRVcmwoIl93ZHQiLCBbInRva2VuIiA9PiAieHh4eHh4Il0pLCAianMiKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICBlY2hvICInLnJlcGxhY2UoL3h4eHh4eC8sIG5ld1Rva2VuKSwKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbih4aHIsIGVsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8qIERvIG5vdGhpbmcgaW4gdGhlIGVkZ2UgY2FzZSB3aGVyZSB0aGUgdG9vbGJhciBoYXMgYWxyZWFkeSBiZWVuIHJlcGxhY2VkIHdpdGggYSBuZXcgb25lICovCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NmVG9vbGJhck1haW5Db250ZW50LScgKyBuZXdUb2tlbikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgLyogRXZhbHVhdGUgaW4gZ2xvYmFsIHNjb3BlIHNjcmlwdHMgZW1iZWRkZWQgaW5zaWRlIHRoZSB0b29sYmFyICovCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpLCBzY3JpcHRzID0gW10uc2xpY2UuY2FsbChlbC5xdWVyeVNlbGVjdG9yQWxsKCdzY3JpcHQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmFsLmNhbGwoe30sIHNjcmlwdHNbaV0uZmlyc3RDaGlsZC5ub2RlVmFsdWUpOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gLTEgIT09IHhoci5yZXNwb25zZVRleHQuaW5kZXhPZignc2YtdG9vbGJhcnJlc2V0JykgPyAnYmxvY2snIDogJ25vbmUnOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsLnN0eWxlLmRpc3BsYXkgPT0gJ25vbmUnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuaW5pdFRvb2xiYXIobmV3VG9rZW4pOwoKICAgICAgICAgICAgICAgICAgICAgICAgLyogSGFuZGxlIHRvb2xiYXItaW5mbyBwb3NpdGlvbiAqLwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9vbGJhckJsb2NrcyA9IFtdLnNsaWNlLmNhbGwoZWwucXVlcnlTZWxlY3RvckFsbCgnLnNmLXRvb2xiYXItYmxvY2snKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0b29sYmFyQmxvY2tzLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sYmFyQmxvY2tzW2ldLm9ubW91c2VvdmVyID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b29sYmFySW5mbyA9IHRoaXMucXVlcnlTZWxlY3RvckFsbCgnLnNmLXRvb2xiYXItaW5mbycpWzBdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYWdlV2lkdGggPSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50V2lkdGggPSB0b29sYmFySW5mby5vZmZzZXRXaWR0aDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGVmdFZhbHVlID0gKGVsZW1lbnRXaWR0aCArIHRoaXMub2Zmc2V0TGVmdCkgLSBwYWdlV2lkdGg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJpZ2h0VmFsdWUgPSAoZWxlbWVudFdpZHRoICsgKHBhZ2VXaWR0aCAtIHRoaXMub2Zmc2V0TGVmdCkpIC0gcGFnZVdpZHRoOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBSZXNldCByaWdodCBhbmQgbGVmdCB2YWx1ZSwgdXNlZnVsIG9uIHdpbmRvdyByZXNpemUgKi8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sYmFySW5mby5zdHlsZS5yaWdodCA9ICcnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xiYXJJbmZvLnN0eWxlLmxlZnQgPSAnJzsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRXaWR0aCA+IHBhZ2VXaWR0aCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sYmFySW5mby5zdHlsZS5sZWZ0ID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobGVmdFZhbHVlID4gMCAmJiByaWdodFZhbHVlID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sYmFySW5mby5zdHlsZS5yaWdodCA9IChyaWdodFZhbHVlICogLTEpICsgJ3B4JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxlZnRWYWx1ZSA8IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbGJhckluZm8uc3R5bGUubGVmdCA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbGJhckluZm8uc3R5bGUucmlnaHQgPSAnMHB4JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJBamF4UmVxdWVzdHMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2YtdG9vbGJhci1hamF4LWNsZWFyJyksICdjbGljaycsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFN0YWNrID0gW107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJBamF4UmVxdWVzdHMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NTdHJlYWsgPSA0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNmLXRvb2xiYXItYWpheC1yZXF1ZXN0LWxpc3QnKS5pbm5lckhUTUwgPSAnJzsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNmLXRvb2xiYXItYmxvY2stYWpheCcpLCAnbW91c2VlbnRlcicsIGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2YtdG9vbGJhci1ibG9jay1hamF4IC5zZi10b29sYmFyLWluZm8nKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0uc2Nyb2xsVG9wID0gZWxlbS5zY3JvbGxIZWlnaHQ7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZi10b29sYmFyLWJsb2NrLWFqYXggPiAuc2YtdG9vbGJhci1pY29uJyksICdjbGljaycsIGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLnBhcmVudE5vZGUsICdob3ZlcicpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkdW1wSW5mbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZi10b29sYmFyLWJsb2NrLWR1bXAgLnNmLXRvb2xiYXItaW5mbycpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gZHVtcEluZm8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZHVtcEluZm8sICdzZmJlZm9yZWR1bXBjb2xsYXBzZScsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdW1wSW5mby5zdHlsZS5taW5IZWlnaHQgPSBkdW1wSW5mby5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQrJ3B4JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihkdW1wSW5mbywgJ21vdXNlbGVhdmUnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVtcEluZm8uc3R5bGUubWluSGVpZ2h0ID0gJyc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oeGhyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzICE9PSAwICYmICFvcHRpb25zLnN0b3ApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZndkdCA9IHRoYXQuZ2V0U2Z3ZHQodG9rZW4pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Z3ZHQuaW5uZXJIVE1MID0gJ1xcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNmLXRvb2xiYXJyZXNldFwiPlxcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZi10b29sYmFyLWljb25cIj48c3ZnIHdpZHRoPVwiMjZcIiBoZWlnaHQ9XCIyOFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2ZXJzaW9uPVwiMS4xXCIgeD1cIjBweFwiIHk9XCIwcHhcIiB2aWV3Qm94PVwiMCAwIDI2IDI4XCIgZW5hYmxlLWJhY2tncm91bmQ9XCJuZXcgMCAwIDI2IDI4XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj48cGF0aCBmaWxsPVwiI0ZGRkZGRlwiIGQ9XCJNMTMgMEM1LjggMCAwIDUuOCAwIDEzYzAgNy4yIDUuOCAxMyAxMyAxM2M3LjIgMCAxMy01LjggMTMtMTNDMjYgNS44IDIwLjIgMCAxMyAweiBNMjAgNy41IGMtMC42IDAtMS0wLjMtMS0wLjljMC0wLjIgMC0wLjQgMC4yLTAuNmMwLjEtMC4zIDAuMi0wLjMgMC4yLTAuNGMwLTAuMy0wLjUtMC40LTAuNy0wLjRjLTIgMC4xLTIuNSAyLjctMi45IDQuOGwtMC4yIDEuMSBjMS4xIDAuMiAxLjkgMCAyLjQtMC4zYzAuNi0wLjQtMC4yLTAuOC0wLjEtMS4zQzE4IDkuMiAxOC40IDkgMTguNyA4LjljMC41IDAgMC44IDAuNSAwLjggMWMwIDAuOC0xLjEgMi0zLjMgMS45IGMtMC4zIDAtMC41IDAtMC43LTAuMUwxNSAxNC4xYy0wLjQgMS43LTAuOSA0LjEtMi42IDYuMmMtMS41IDEuOC0zLjEgMi4xLTMuOCAyLjFjLTEuMyAwLTIuMS0wLjYtMi4yLTEuNmMwLTAuOSAwLjgtMS40IDEuMy0xLjQgYzAuNyAwIDEuMiAwLjUgMS4yIDEuMWMwIDAuNS0wLjIgMC42LTAuNCAwLjdjLTAuMSAwLjEtMC4zIDAuMi0wLjMgMC40YzAgMC4xIDAuMSAwLjMgMC40IDAuM2MwLjUgMCAwLjktMC4zIDEuMi0wLjUgYzEuMy0xIDEuNy0yLjkgMi40LTYuMmwwLjEtMC44YzAuMi0xLjEgMC41LTIuMyAwLjgtMy41Yy0wLjktMC43LTEuNC0xLjUtMi42LTEuOGMtMC44LTAuMi0xLjMgMC0xLjcgMC40QzguNCAxMCA4LjYgMTAuNyA5IDExLjEgbDAuNyAwLjdjMC44IDAuOSAxLjMgMS43IDEuMSAyLjdjLTAuMyAxLjYtMi4xIDIuOC00LjMgMi4xYy0xLjktMC42LTIuMi0xLjktMi0yLjdjMC4yLTAuNiAwLjctMC44IDEuMi0wLjYgYzAuNSAwLjIgMC43IDAuOCAwLjYgMS4zYzAgMC4xIDAgMC4xLTAuMSAwLjNDNiAxNSA1LjkgMTUuMiA1LjkgMTUuM2MtMC4xIDAuNCAwLjQgMC43IDAuOCAwLjhjMC44IDAuMyAxLjctMC4yIDEuOS0wLjkgYzAuMi0wLjYtMC4yLTEuMS0wLjQtMS4ybC0wLjgtMC45Yy0wLjQtMC40LTEuMi0xLjUtMC44LTIuOGMwLjItMC41IDAuNS0xIDAuOS0xLjRjMS0wLjcgMi0wLjggMy0wLjZjMS4zIDAuNCAxLjkgMS4yIDIuOCAxLjkgYzAuNS0xLjMgMS4xLTIuNiAyLTMuOGMwLjktMSAyLTEuNyAzLjMtMS44QzIwIDQuOCAyMSA1LjQgMjEgNi4zQzIxIDYuNyAyMC44IDcuNSAyMCA3LjV6XCIvPjwvc3ZnPjwvZGl2PlxcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFuIGVycm9yIG9jY3VycmVkIHdoaWxlIGxvYWRpbmcgdGhlIHdlYiBkZWJ1ZyB0b29sYmFyLiA8YSBocmVmPVwiIjsKICAgICAgICAvLyBsaW5lIDYyMQogICAgICAgIGVjaG8gdHdpZ19lc2NhcGVfZmlsdGVyKCR0aGlzLT5lbnYsIHR3aWdfZXNjYXBlX2ZpbHRlcigkdGhpcy0+ZW52LCAkdGhpcy0+ZXh0ZW5zaW9uc1snU3ltZm9ueVxCcmlkZ2VcVHdpZ1xFeHRlbnNpb25cUm91dGluZ0V4dGVuc2lvbiddLT5nZXRVcmwoIl9wcm9maWxlcl9ob21lIiksICJqcyIpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgIGVjaG8gIicgKyBuZXdUb2tlbiArICdcIj5PcGVuIHRoZSB3ZWIgcHJvZmlsZXIuPC9hPlxcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZndkdC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3NmLXRvb2xiYXIgc2YtZXJyb3ItdG9vbGJhcicpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBvcHRpb25zCiAgICAgICAgICAgICAgICApOwoKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbihzZWxlY3RvciwgZWxPbiwgZWxPZmYpIHsKICAgICAgICAgICAgICAgIHZhciB0bXAgPSBlbE9uLnN0eWxlLmRpc3BsYXksCiAgICAgICAgICAgICAgICAgICAgZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzZWxlY3Rvcik7CgogICAgICAgICAgICAgICAgZWxPbi5zdHlsZS5kaXNwbGF5ID0gZWxPZmYuc3R5bGUuZGlzcGxheTsKICAgICAgICAgICAgICAgIGVsT2ZmLnN0eWxlLmRpc3BsYXkgPSB0bXA7CgogICAgICAgICAgICAgICAgaWYgKGVsKSB7CiAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJyA9PT0gdG1wID8gJ25vbmUnIDogJ2Jsb2NrJzsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGNyZWF0ZVRhYnM6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdmFyIHRhYkdyb3VwcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZi10YWJzOm5vdChbZGF0YS1wcm9jZXNzZWQ9dHJ1ZV0pJyk7CgogICAgICAgICAgICAgICAgLyogY3JlYXRlIHRoZSB0YWIgbmF2aWdhdGlvbiBmb3IgZWFjaCBncm91cCBvZiB0YWJzICovCiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRhYkdyb3Vwcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgIHZhciB0YWJzID0gdGFiR3JvdXBzW2ldLnF1ZXJ5U2VsZWN0b3JBbGwoJzpzY29wZSA+IC50YWInKTsKICAgICAgICAgICAgICAgICAgICB2YXIgdGFiTmF2aWdhdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7CiAgICAgICAgICAgICAgICAgICAgdGFiTmF2aWdhdGlvbi5jbGFzc05hbWUgPSAndGFiLW5hdmlnYXRpb24nOwoKICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRUYWJJZCA9ICd0YWItJyArIGkgKyAnLTAnOyAvKiBzZWxlY3QgdGhlIGZpcnN0IHRhYiBieSBkZWZhdWx0ICovCiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0YWJzLmxlbmd0aDsgaisrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YWJJZCA9ICd0YWItJyArIGkgKyAnLScgKyBqOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFiVGl0bGUgPSB0YWJzW2pdLnF1ZXJ5U2VsZWN0b3IoJy50YWItdGl0bGUnKS5pbm5lckhUTUw7CgogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFiTmF2aWdhdGlvbkl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgICAgICAgICAgICAgICAgICAgICB0YWJOYXZpZ2F0aW9uSXRlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGFiLWlkJywgdGFiSWQpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzQ2xhc3ModGFic1tqXSwgJ2FjdGl2ZScpKSB7IHNlbGVjdGVkVGFiSWQgPSB0YWJJZDsgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzQ2xhc3ModGFic1tqXSwgJ2Rpc2FibGVkJykpIHsgYWRkQ2xhc3ModGFiTmF2aWdhdGlvbkl0ZW0sICdkaXNhYmxlZCcpOyB9CiAgICAgICAgICAgICAgICAgICAgICAgIHRhYk5hdmlnYXRpb25JdGVtLmlubmVySFRNTCA9IHRhYlRpdGxlOwogICAgICAgICAgICAgICAgICAgICAgICB0YWJOYXZpZ2F0aW9uLmFwcGVuZENoaWxkKHRhYk5hdmlnYXRpb25JdGVtKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YWJDb250ZW50ID0gdGFic1tqXS5xdWVyeVNlbGVjdG9yKCcudGFiLWNvbnRlbnQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgdGFiQ29udGVudC5wYXJlbnRFbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLCB0YWJJZCk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICB0YWJHcm91cHNbaV0uaW5zZXJ0QmVmb3JlKHRhYk5hdmlnYXRpb24sIHRhYkdyb3Vwc1tpXS5maXJzdENoaWxkKTsKICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyhkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS10YWItaWQ9XCInICsgc2VsZWN0ZWRUYWJJZCArICdcIl0nKSwgJ2FjdGl2ZScpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8qIGRpc3BsYXkgdGhlIGFjdGl2ZSB0YWIgYW5kIGFkZCB0aGUgJ2NsaWNrJyBldmVudCBsaXN0ZW5lcnMgKi8KICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0YWJHcm91cHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICB0YWJOYXZpZ2F0aW9uID0gdGFiR3JvdXBzW2ldLnF1ZXJ5U2VsZWN0b3JBbGwoJzpzY29wZSA+IC50YWItbmF2aWdhdGlvbiBsaScpOwoKICAgICAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgdGFiTmF2aWdhdGlvbi5sZW5ndGg7IGorKykgewogICAgICAgICAgICAgICAgICAgICAgICB0YWJJZCA9IHRhYk5hdmlnYXRpb25bal0uZ2V0QXR0cmlidXRlKCdkYXRhLXRhYi1pZCcpOwogICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YWJJZCkucXVlcnlTZWxlY3RvcignLnRhYi10aXRsZScpLmNsYXNzTmFtZSA9ICdoaWRkZW4nOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc0NsYXNzKHRhYk5hdmlnYXRpb25bal0sICdhY3RpdmUnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFiSWQpLmNsYXNzTmFtZSA9ICdibG9jayc7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YWJJZCkuY2xhc3NOYW1lID0gJ2hpZGRlbic7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHRhYk5hdmlnYXRpb25bal0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aXZlVGFiID0gZS50YXJnZXQgfHwgZS5zcmNFbGVtZW50OwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIG5lZWRlZCBiZWNhdXNlIHdoZW4gdGhlIHRhYiBjb250YWlucyBIVE1MIGNvbnRlbnRzLCB1c2VyIGNhbiBjbGljayAqLwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogb24gYW55IG9mIHRob3NlIGVsZW1lbnRzIGluc3RlYWQgb2YgdGhlaXIgcGFyZW50ICc8bGk+JyBlbGVtZW50ICovCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoYWN0aXZlVGFiLnRhZ05hbWUudG9Mb3dlckNhc2UoKSAhPT0gJ2xpJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZVRhYiA9IGFjdGl2ZVRhYi5wYXJlbnROb2RlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGdldCB0aGUgZnVsbCBsaXN0IG9mIHRhYnMgdGhyb3VnaCB0aGUgcGFyZW50IG9mIHRoZSBhY3RpdmUgdGFiIGVsZW1lbnQgKi8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YWJOYXZpZ2F0aW9uID0gYWN0aXZlVGFiLnBhcmVudE5vZGUuY2hpbGRyZW47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRhYk5hdmlnYXRpb24ubGVuZ3RoOyBrKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFiSWQgPSB0YWJOYXZpZ2F0aW9uW2tdLmdldEF0dHJpYnV0ZSgnZGF0YS10YWItaWQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YWJJZCkuY2xhc3NOYW1lID0gJ2hpZGRlbic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3ModGFiTmF2aWdhdGlvbltrXSwgJ2FjdGl2ZScpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKGFjdGl2ZVRhYiwgJ2FjdGl2ZScpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGl2ZVRhYklkID0gYWN0aXZlVGFiLmdldEF0dHJpYnV0ZSgnZGF0YS10YWItaWQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGFjdGl2ZVRhYklkKS5jbGFzc05hbWUgPSAnYmxvY2snOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHRhYkdyb3Vwc1tpXS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvY2Vzc2VkJywgJ3RydWUnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGNyZWF0ZVRvZ2dsZXM6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdmFyIHRvZ2dsZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2YtdG9nZ2xlOm5vdChbZGF0YS1wcm9jZXNzZWQ9dHJ1ZV0pJyk7CgogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2dnbGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnRTZWxlY3RvciA9IHRvZ2dsZXNbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLXRvZ2dsZS1zZWxlY3RvcicpOwogICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbGVtZW50U2VsZWN0b3IpOwoKICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyhlbGVtZW50LCAnc2YtdG9nZ2xlLWNvbnRlbnQnKTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKHRvZ2dsZXNbaV0uaGFzQXR0cmlidXRlKCdkYXRhLXRvZ2dsZS1pbml0aWFsJykgJiYgdG9nZ2xlc1tpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9nZ2xlLWluaXRpYWwnKSA9PSAnZGlzcGxheScpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3ModG9nZ2xlc1tpXSwgJ3NmLXRvZ2dsZS1vbicpOwogICAgICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyhlbGVtZW50LCAnc2YtdG9nZ2xlLXZpc2libGUnKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyh0b2dnbGVzW2ldLCAnc2YtdG9nZ2xlLW9mZicpOwogICAgICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyhlbGVtZW50LCAnc2YtdG9nZ2xlLWhpZGRlbicpOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcih0b2dnbGVzW2ldLCAnY2xpY2snLCBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgnJyAhPT0gd2luZG93LmdldFNlbGVjdGlvbigpLnRvU3RyaW5nKCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIERvbid0IGRvIGFueXRoaW5nIG9uIHRleHQgc2VsZWN0aW9uICovCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b2dnbGUgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7CgogICAgICAgICAgICAgICAgICAgICAgICAvKiBuZWVkZWQgYmVjYXVzZSB3aGVuIHRoZSB0b2dnbGUgY29udGFpbnMgSFRNTCBjb250ZW50cywgdXNlciBjYW4gY2xpY2sgKi8KICAgICAgICAgICAgICAgICAgICAgICAgLyogb24gYW55IG9mIHRob3NlIGVsZW1lbnRzIGluc3RlYWQgb2YgdGhlaXIgcGFyZW50ICcuc2YtdG9nZ2xlJyBlbGVtZW50ICovCiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICghaGFzQ2xhc3ModG9nZ2xlLCAnc2YtdG9nZ2xlJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZSA9IHRvZ2dsZS5wYXJlbnROb2RlOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodG9nZ2xlLmdldEF0dHJpYnV0ZSgnZGF0YS10b2dnbGUtc2VsZWN0b3InKSk7CgogICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyh0b2dnbGUsICdzZi10b2dnbGUtb24nKTsKICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3ModG9nZ2xlLCAnc2YtdG9nZ2xlLW9mZicpOwogICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyhlbGVtZW50LCAnc2YtdG9nZ2xlLWhpZGRlbicpOwogICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyhlbGVtZW50LCAnc2YtdG9nZ2xlLXZpc2libGUnKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8qIHRoZSB0b2dnbGUgZG9lc24ndCBjaGFuZ2UgaXRzIGNvbnRlbnRzIHdoZW4gY2xpY2tpbmcgb24gaXQgKi8KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0b2dnbGUuaGFzQXR0cmlidXRlKCdkYXRhLXRvZ2dsZS1hbHQtY29udGVudCcpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdG9nZ2xlLmhhc0F0dHJpYnV0ZSgnZGF0YS10b2dnbGUtb3JpZ2luYWwtY29udGVudCcpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGUuc2V0QXR0cmlidXRlKCdkYXRhLXRvZ2dsZS1vcmlnaW5hbC1jb250ZW50JywgdG9nZ2xlLmlubmVySFRNTCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50Q29udGVudCA9IHRvZ2dsZS5pbm5lckhUTUw7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvcmlnaW5hbENvbnRlbnQgPSB0b2dnbGUuZ2V0QXR0cmlidXRlKCdkYXRhLXRvZ2dsZS1vcmlnaW5hbC1jb250ZW50Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbHRDb250ZW50ID0gdG9nZ2xlLmdldEF0dHJpYnV0ZSgnZGF0YS10b2dnbGUtYWx0LWNvbnRlbnQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlLmlubmVySFRNTCA9IGN1cnJlbnRDb250ZW50ICE9PSBhbHRDb250ZW50ID8gYWx0Q29udGVudCA6IG9yaWdpbmFsQ29udGVudDsKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgLyogUHJldmVudHMgZnJvbSBkaXNhbGxvd2luZyBjbGlja3Mgb24gbGlua3MgaW5zaWRlIHRvZ2dsZXMgKi8KICAgICAgICAgICAgICAgICAgICB2YXIgdG9nZ2xlTGlua3MgPSB0b2dnbGVzW2ldLnF1ZXJ5U2VsZWN0b3JBbGwoJ2EnKTsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRvZ2dsZUxpbmtzLmxlbmd0aDsgaisrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIodG9nZ2xlTGlua3Nbal0sICdjbGljaycsIGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgLyogUHJldmVudHMgZnJvbSBkaXNhbGxvd2luZyBjbGlja3Mgb24gXCJjb3B5IHRvIGNsaXBib2FyZFwiIGVsZW1lbnRzIGluc2lkZSB0b2dnbGVzICovCiAgICAgICAgICAgICAgICAgICAgdmFyIGNvcHlUb0NsaXBib2FyZEVsZW1lbnRzID0gdG9nZ2xlc1tpXS5xdWVyeVNlbGVjdG9yQWxsKCdzcGFuW2RhdGEtY2xpcGJvYXJkLXRleHRdJyk7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBjb3B5VG9DbGlwYm9hcmRFbGVtZW50cy5sZW5ndGg7IGsrKykgewogICAgICAgICAgICAgICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKGNvcHlUb0NsaXBib2FyZEVsZW1lbnRzW2tdLCAnY2xpY2snLCBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHRvZ2dsZXNbaV0uc2V0QXR0cmlidXRlKCdkYXRhLXByb2Nlc3NlZCcsICd0cnVlJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBpbml0aWFsaXplTG9nc1RhYmxlOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIFNmanMudXBkYXRlTG9nc1RhYmxlKCk7CgogICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmxvZy1maWx0ZXIgaW5wdXQnKS5mb3JFYWNoKChpbnB1dCkgPT4gewogICAgICAgICAgICAgICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHsgU2Zqcy51cGRhdGVMb2dzVGFibGUoKTsgfSk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZmlsdGVyLXNlbGVjdC1hbGwtb3Itbm9uZSBidXR0b24nKS5mb3JFYWNoKChsaW5rKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgbGluay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0QWxsID0gbGluay5jbGFzc0xpc3QuY29udGFpbnMoJ3NlbGVjdC1hbGwnKTsKICAgICAgICAgICAgICAgICAgICAgICAgbGluay5jbG9zZXN0KCcubG9nLWZpbHRlci1jb250ZW50JykucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQnKS5mb3JFYWNoKChpbnB1dCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuY2hlY2tlZCA9IHNlbGVjdEFsbDsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgICBTZmpzLnVwZGF0ZUxvZ3NUYWJsZSgpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4gewogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2RldGFpbHMubG9nLWZpbHRlcicpLmZvckVhY2goKGZpbHRlckVsZW1lbnQpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmaWx0ZXJFbGVtZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCkgJiYgZmlsdGVyRWxlbWVudC5vcGVuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJFbGVtZW50Lm9wZW4gPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICB1cGRhdGVMb2dzVGFibGU6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRUeXBlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2xvZy1maWx0ZXItdHlwZSBpbnB1dDpjaGVja2VkJykudmFsdWU7CiAgICAgICAgICAgICAgICBjb25zdCBwcmlvcml0aWVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI2xvZy1maWx0ZXItcHJpb3JpdHkgaW5wdXQnKTsKICAgICAgICAgICAgICAgIGNvbnN0IGFsbFByaW9yaXRpZXMgPSBBcnJheS5mcm9tKHByaW9yaXRpZXMpLm1hcCgoaW5wdXQpID0+IGlucHV0LnZhbHVlKTsKICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkUHJpb3JpdGllcyA9IEFycmF5LmZyb20ocHJpb3JpdGllcykuZmlsdGVyKChpbnB1dCkgPT4gaW5wdXQuY2hlY2tlZCkubWFwKChpbnB1dCkgPT4gaW5wdXQudmFsdWUpOwogICAgICAgICAgICAgICAgY29uc3QgY2hhbm5lbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjbG9nLWZpbHRlci1jaGFubmVsIGlucHV0Jyk7CiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZENoYW5uZWxzID0gQXJyYXkuZnJvbShjaGFubmVscykuZmlsdGVyKChpbnB1dCkgPT4gaW5wdXQuY2hlY2tlZCkubWFwKChpbnB1dCkgPT4gaW5wdXQudmFsdWUpOwoKICAgICAgICAgICAgICAgIGNvbnN0IGxvZ3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCd0YWJsZS5sb2dzJyk7CiAgICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gbG9ncykgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvKiBoaWRlIHJvd3MgdGhhdCBkb24ndCBtYXRjaCB0aGUgY3VycmVudCBmaWx0ZXJzICovCiAgICAgICAgICAgICAgICBsZXQgbnVtVmlzaWJsZVJvd3MgPSAwOwogICAgICAgICAgICAgICAgbG9ncy5xdWVyeVNlbGVjdG9yQWxsKCd0Ym9keSB0cicpLmZvckVhY2goKHJvdykgPT4gewogICAgICAgICAgICAgICAgICAgIGlmICgnYWxsJyAhPT0gc2VsZWN0ZWRUeXBlICYmIHNlbGVjdGVkVHlwZSAhPT0gcm93LmdldEF0dHJpYnV0ZSgnZGF0YS10eXBlJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcm93LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGNvbnN0IHByaW9yaXR5ID0gcm93LmdldEF0dHJpYnV0ZSgnZGF0YS1wcmlvcml0eScpOwogICAgICAgICAgICAgICAgICAgIGlmIChmYWxzZSA9PT0gc2VsZWN0ZWRQcmlvcml0aWVzLmluY2x1ZGVzKHByaW9yaXR5KSAmJiB0cnVlID09PSBhbGxQcmlvcml0aWVzLmluY2x1ZGVzKHByaW9yaXR5KSkgewogICAgICAgICAgICAgICAgICAgICAgICByb3cuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYgKCcnICE9PSByb3cuZ2V0QXR0cmlidXRlKCdkYXRhLWNoYW5uZWwnKSAmJiBmYWxzZSA9PT0gc2VsZWN0ZWRDaGFubmVscy5pbmNsdWRlcyhyb3cuZ2V0QXR0cmlidXRlKCdkYXRhLWNoYW5uZWwnKSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcm93LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHJvdy5zdHlsZS5kaXNwbGF5ID0gJ3RhYmxlLXJvdyc7CiAgICAgICAgICAgICAgICAgICAgbnVtVmlzaWJsZVJvd3MrKzsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3RhYmxlLmxvZ3MnKS5zdHlsZS5kaXNwbGF5ID0gMCA9PT0gbnVtVmlzaWJsZVJvd3MgPyAnbm9uZScgOiAndGFibGUnOwogICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5vLWxvZ3MtbWVzc2FnZScpLnN0eWxlLmRpc3BsYXkgPSAwID09PSBudW1WaXNpYmxlUm93cyA/ICdibG9jaycgOiAnbm9uZSc7CgogICAgICAgICAgICAgICAgLyogdXBkYXRlIHRoZSBzZWxlY3RlZCB0b3RhbHMgb2YgYWxsIGZpbHRlcnMgKi8KICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNsb2ctZmlsdGVyLXByaW9yaXR5IC5maWx0ZXItYWN0aXZlLW51bScpLmlubmVyVGV4dCA9IChwcmlvcml0aWVzLmxlbmd0aCA9PT0gc2VsZWN0ZWRQcmlvcml0aWVzLmxlbmd0aCkgPyAnQWxsJyA6IHNlbGVjdGVkUHJpb3JpdGllcy5sZW5ndGg7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbG9nLWZpbHRlci1jaGFubmVsIC5maWx0ZXItYWN0aXZlLW51bScpLmlubmVyVGV4dCA9IChjaGFubmVscy5sZW5ndGggPT09IHNlbGVjdGVkQ2hhbm5lbHMubGVuZ3RoKSA/ICdBbGwnIDogc2VsZWN0ZWRDaGFubmVscy5sZW5ndGg7CgogICAgICAgICAgICAgICAgLyogdXBkYXRlIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgXCJsb2cgdHlwZVwiIHRhYiAqLwogICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI2xvZy1maWx0ZXItdHlwZSBsaScpLmZvckVhY2goKHRhYikgPT4gdGFiLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpKTsKICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNsb2ctZmlsdGVyLXR5cGUgaW5wdXRbdmFsdWU9XCJcJHtzZWxlY3RlZFR5cGV9XCJdYCkucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTsKICAgICAgICAgICAgfSwKICAgICAgICB9OwogICAgfSkoKTsKCiAgICBTZmpzLmFkZEV2ZW50TGlzdGVuZXIoZG9jdW1lbnQsICdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24oKSB7CiAgICAgICAgU2Zqcy5jcmVhdGVUYWJzKCk7CiAgICAgICAgU2Zqcy5jcmVhdGVUb2dnbGVzKCk7CiAgICB9KTsKfQovKl1dPiovPC9zY3JpcHQ+CiI7CiAgICAgICAgCiAgICAgICAgJF9faW50ZXJuYWxfNWEyN2E4YmEyMWNhNzliNjE5MzIzNzZiMmZhOTIyZDItPmxlYXZlKCRfX2ludGVybmFsXzVhMjdhOGJhMjFjYTc5YjYxOTMyMzc2YjJmYTkyMmQyX3Byb2YpOwoKICAgICAgICAKICAgICAgICAkX19pbnRlcm5hbF82ZjQ3YmJlOTk4M2FmODFmMWU3NDUwZTlhM2UzNzY4Zi0+bGVhdmUoJF9faW50ZXJuYWxfNmY0N2JiZTk5ODNhZjgxZjFlNzQ1MGU5YTNlMzc2OGZfcHJvZik7CgogICAgfQoKICAgIC8qKgogICAgICogQGNvZGVDb3ZlcmFnZUlnbm9yZQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0VGVtcGxhdGVOYW1lKCkKICAgIHsKICAgICAgICByZXR1cm4gIkBXZWJQcm9maWxlci9Qcm9maWxlci9iYXNlX2pzLmh0bWwudHdpZyI7CiAgICB9CgogICAgLyoqCiAgICAgKiBAY29kZUNvdmVyYWdlSWdub3JlCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBpc1RyYWl0YWJsZSgpCiAgICB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIC8qKgogICAgICogQGNvZGVDb3ZlcmFnZUlnbm9yZQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0RGVidWdJbmZvKCkKICAgIHsKICAgICAgICByZXR1cm4gYXJyYXkgKCAgNjk0ID0+IDYyMSwgIDYxMCA9PiA1NDAsICA0NjAgPT4gMzkyLCAgNDI4ID0+IDM2MywgIDQyMiA9PiAzNjAsICA0MTggPT4gMzU5LCAgNDEyID0+IDM1NiwgIDQwOCA9PiAzNTUsICAzNjIgPT4gMzEyLCAgMzQxID0+IDI5MywgIDMzOSA9PiAyOTIsICA1MiA9PiA3LCAgNDMgPT4gMywpOwogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRTb3VyY2VDb250ZXh0KCkKICAgIHsKICAgICAgICByZXR1cm4gbmV3IFNvdXJjZSgieyMgVGhpcyBmaWxlIGlzIHBhcnRpYWxseSBkdXBsaWNhdGVkIGluIHNyYy9TeW1mb255L0NvbXBvbmVudC9FcnJvckhhbmRsZXIvUmVzb3VyY2VzL2Fzc2V0cy9qcy9leGNlcHRpb24uanMuCiAgIElmIHlvdSBtYWtlIGFueSBjaGFuZ2UgaW4gdGhpcyBmaWxlLCB2ZXJpZnkgdGhlIHNhbWUgY2hhbmdlIGlzIG5lZWRlZCBpbiB0aGUgb3RoZXIgZmlsZS4gI30KPHNjcmlwdHslIGlmIGNzcF9zY3JpcHRfbm9uY2UgaXMgZGVmaW5lZCBhbmQgY3NwX3NjcmlwdF9ub25jZSAlfSBub25jZT1cInt7IGNzcF9zY3JpcHRfbm9uY2UgfX1cInslIGVuZGlmICV9Pi8qPCFbQ0RBVEFbKi8KICAgIHsjIENhdXRpb246IHRoZSBjb250ZW50cyBvZiB0aGlzIGZpbGUgYXJlIHByb2Nlc3NlZCBieSBUd2lnIGJlZm9yZSBsb2FkaW5nCiAgICAgICAgICAgICAgICB0aGVtIGFzIEphdmFTY3JpcHQgc291cmNlIGNvZGUuIEFsd2F5cyB1c2UgJy8qJyBjb21tZW50cyBpbnN0ZWFkCiAgICAgICAgICAgICAgICBvZiAnLy8nIGNvbW1lbnRzIHRvIGF2b2lkIGltcG9zc2libGUtdG8tZGVidWcgc2lkZS1lZmZlY3RzICN9CgppZiAodHlwZW9mIFNmanMgPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBTZmpzLmxvYWRUb29sYmFyID09PSAndW5kZWZpbmVkJykgewogICAgU2ZqcyA9IChmdW5jdGlvbigpIHsKICAgICAgICBcInVzZSBzdHJpY3RcIjsKCiAgICAgICAgaWYgKCdjbGFzc0xpc3QnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkgewogICAgICAgICAgICB2YXIgaGFzQ2xhc3MgPSBmdW5jdGlvbiAoZWwsIGNzc0NsYXNzKSB7IHJldHVybiBlbC5jbGFzc0xpc3QuY29udGFpbnMoY3NzQ2xhc3MpOyB9OwogICAgICAgICAgICB2YXIgcmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbihlbCwgY3NzQ2xhc3MpIHsgZWwuY2xhc3NMaXN0LnJlbW92ZShjc3NDbGFzcyk7IH07CiAgICAgICAgICAgIHZhciBhZGRDbGFzcyA9IGZ1bmN0aW9uKGVsLCBjc3NDbGFzcykgeyBlbC5jbGFzc0xpc3QuYWRkKGNzc0NsYXNzKTsgfTsKICAgICAgICAgICAgdmFyIHRvZ2dsZUNsYXNzID0gZnVuY3Rpb24oZWwsIGNzc0NsYXNzKSB7IGVsLmNsYXNzTGlzdC50b2dnbGUoY3NzQ2xhc3MpOyB9OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhciBoYXNDbGFzcyA9IGZ1bmN0aW9uIChlbCwgY3NzQ2xhc3MpIHsgcmV0dXJuIGVsLmNsYXNzTmFtZS5tYXRjaChuZXcgUmVnRXhwKCdcXFxcYicgKyBjc3NDbGFzcyArICdcXFxcYicpKTsgfTsKICAgICAgICAgICAgdmFyIHJlbW92ZUNsYXNzID0gZnVuY3Rpb24oZWwsIGNzc0NsYXNzKSB7IGVsLmNsYXNzTmFtZSA9IGVsLmNsYXNzTmFtZS5yZXBsYWNlKG5ldyBSZWdFeHAoJ1xcXFxiJyArIGNzc0NsYXNzICsgJ1xcXFxiJyksICcgJyk7IH07CiAgICAgICAgICAgIHZhciBhZGRDbGFzcyA9IGZ1bmN0aW9uKGVsLCBjc3NDbGFzcykgeyBpZiAoIWhhc0NsYXNzKGVsLCBjc3NDbGFzcykpIHsgZWwuY2xhc3NOYW1lICs9IFwiIFwiICsgY3NzQ2xhc3M7IH0gfTsKICAgICAgICAgICAgdmFyIHRvZ2dsZUNsYXNzID0gZnVuY3Rpb24oZWwsIGNzc0NsYXNzKSB7IGhhc0NsYXNzKGVsLCBjc3NDbGFzcykgPyByZW1vdmVDbGFzcyhlbCwgY3NzQ2xhc3MpIDogYWRkQ2xhc3MoZWwsIGNzc0NsYXNzKTsgfTsKICAgICAgICB9CgogICAgICAgIHZhciBub29wID0gZnVuY3Rpb24oKSB7fTsKCiAgICAgICAgdmFyIHByb2ZpbGVyU3RvcmFnZUtleSA9ICdzeW1mb255L3Byb2ZpbGVyLyc7CgogICAgICAgIHZhciBhZGRFdmVudExpc3RlbmVyOwoKICAgICAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICBpZiAoISgnYWRkRXZlbnRMaXN0ZW5lcicgaW4gZWwpKSB7CiAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAoZWxlbWVudCwgZXZlbnROYW1lLCBjYWxsYmFjaykgewogICAgICAgICAgICAgICAgZWxlbWVudC5hdHRhY2hFdmVudCgnb24nICsgZXZlbnROYW1lLCBjYWxsYmFjayk7CiAgICAgICAgICAgIH07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIChlbGVtZW50LCBldmVudE5hbWUsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBjYWxsYmFjaywgZmFsc2UpOwogICAgICAgICAgICB9OwogICAgICAgIH0KCiAgICAgICAgaWYgKG5hdmlnYXRvci5jbGlwYm9hcmQpIHsKICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtY2xpcGJvYXJkLXRleHRdJykuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50KSB7CiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhlbGVtZW50LCAnaGlkZGVuJyk7CiAgICAgICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY2xpcGJvYXJkLXRleHQnKSk7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIHZhciByZXF1ZXN0ID0gZnVuY3Rpb24odXJsLCBvblN1Y2Nlc3MsIG9uRXJyb3IsIHBheWxvYWQsIG9wdGlvbnMsIHRyaWVzKSB7CiAgICAgICAgICAgIHZhciB4aHIgPSB3aW5kb3cuWE1MSHR0cFJlcXVlc3QgPyBuZXcgWE1MSHR0cFJlcXVlc3QoKSA6IG5ldyBBY3RpdmVYT2JqZWN0KCdNaWNyb3NvZnQuWE1MSFRUUCcpOwogICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKICAgICAgICAgICAgb3B0aW9ucy5yZXRyeSA9IG9wdGlvbnMucmV0cnkgfHwgZmFsc2U7CiAgICAgICAgICAgIHRyaWVzID0gdHJpZXMgfHwgMTsKICAgICAgICAgICAgLyogdGhpcyBkZWxheXMgZm9yIDEyNSwgMzc1LCA2MjUsIDg3NSwgYW5kIDEwMDAsIC4uLiAqLwogICAgICAgICAgICB2YXIgZGVsYXkgPSB0cmllcyA8IDUgPyAodHJpZXMgLSAwLjUpICogMjUwIDogMTAwMDsKCiAgICAgICAgICAgIHhoci5vcGVuKG9wdGlvbnMubWV0aG9kIHx8ICdHRVQnLCB1cmwsIHRydWUpOwogICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignWC1SZXF1ZXN0ZWQtV2l0aCcsICdYTUxIdHRwUmVxdWVzdCcpOwogICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oc3RhdGUpIHsKICAgICAgICAgICAgICAgIGlmICg0ICE9PSB4aHIucmVhZHlTdGF0ZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09IDQwNCAmJiBvcHRpb25zLnJldHJ5ICYmICFvcHRpb25zLnN0b3ApIHsKICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5zdG9wKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdCh1cmwsIG9uU3VjY2Vzcywgb25FcnJvciwgcGF5bG9hZCwgb3B0aW9ucywgdHJpZXMgKyAxKTsKICAgICAgICAgICAgICAgICAgICB9LCBkZWxheSk7CgogICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICgyMDAgPT09IHhoci5zdGF0dXMpIHsKICAgICAgICAgICAgICAgICAgICAob25TdWNjZXNzIHx8IG5vb3ApKHhocik7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIChvbkVycm9yIHx8IG5vb3ApKHhocik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CgogICAgICAgICAgICBpZiAob3B0aW9ucy5vblNlbmQpIHsKICAgICAgICAgICAgICAgIG9wdGlvbnMub25TZW5kKHRyaWVzKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgeGhyLnNlbmQocGF5bG9hZCB8fCAnJyk7CiAgICAgICAgfTsKCiAgICAgICAgdmFyIGdldFByZWZlcmVuY2UgPSBmdW5jdGlvbihuYW1lKSB7CiAgICAgICAgICAgIGlmICghd2luZG93LmxvY2FsU3RvcmFnZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShwcm9maWxlclN0b3JhZ2VLZXkgKyBuYW1lKTsKICAgICAgICB9OwoKICAgICAgICB2YXIgc2V0UHJlZmVyZW5jZSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7CiAgICAgICAgICAgIGlmICghd2luZG93LmxvY2FsU3RvcmFnZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHByb2ZpbGVyU3RvcmFnZUtleSArIG5hbWUsIHZhbHVlKTsKICAgICAgICB9OwoKICAgICAgICB2YXIgcmVxdWVzdFN0YWNrID0gW107CgogICAgICAgIHZhciBleHRyYWN0SGVhZGVycyA9IGZ1bmN0aW9uKHhociwgc3RhY2tFbGVtZW50KSB7CiAgICAgICAgICAgIC8qIEhlcmUgd2UgYXZvaWQgdG8gY2FsbCB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIgaW4gb3JkZXIgdG8gKi8KICAgICAgICAgICAgLyogcHJldmVudCBwb2xsdXRpbmcgdGhlIGNvbnNvbGUgd2l0aCBDT1JTIHNlY3VyaXR5IGVycm9ycyAqLwogICAgICAgICAgICB2YXIgYWxsSGVhZGVycyA9IHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKTsKICAgICAgICAgICAgdmFyIHJldDsKCiAgICAgICAgICAgIGlmIChyZXQgPSBhbGxIZWFkZXJzLm1hdGNoKC9eeC1kZWJ1Zy10b2tlbjpcXHMrKC4qKVwkL2ltKSkgewogICAgICAgICAgICAgICAgc3RhY2tFbGVtZW50LnByb2ZpbGUgPSByZXRbMV07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHJldCA9IGFsbEhlYWRlcnMubWF0Y2goL154LWRlYnVnLXRva2VuLWxpbms6XFxzKyguKilcJC9pbSkpIHsKICAgICAgICAgICAgICAgIHN0YWNrRWxlbWVudC5wcm9maWxlclVybCA9IHJldFsxXTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocmV0ID0gYWxsSGVhZGVycy5tYXRjaCgvXlN5bWZvbnktRGVidWctVG9vbGJhci1SZXBsYWNlOlxccysoLiopXCQvaW0pKSB7CiAgICAgICAgICAgICAgICBzdGFja0VsZW1lbnQudG9vbGJhclJlcGxhY2VGaW5pc2hlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgc3RhY2tFbGVtZW50LnRvb2xiYXJSZXBsYWNlID0gJzEnID09PSByZXRbMV07CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICB2YXIgc3VjY2Vzc1N0cmVhayA9IDQ7CiAgICAgICAgdmFyIHBlbmRpbmdSZXF1ZXN0cyA9IDA7CiAgICAgICAgdmFyIHJlbmRlckFqYXhSZXF1ZXN0cyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB2YXIgcmVxdWVzdENvdW50ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2YtdG9vbGJhci1hamF4LXJlcXVlc3QtY291bnRlcicpOwogICAgICAgICAgICBpZiAoIXJlcXVlc3RDb3VudGVyKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmVxdWVzdENvdW50ZXIudGV4dENvbnRlbnQgPSByZXF1ZXN0U3RhY2subGVuZ3RoOwoKICAgICAgICAgICAgdmFyIGluZm9TcGFuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zZi10b29sYmFyLWFqYXgtaW5mb1wiKTsKICAgICAgICAgICAgaWYgKGluZm9TcGFuKSB7CiAgICAgICAgICAgICAgICBpbmZvU3Bhbi50ZXh0Q29udGVudCA9IHJlcXVlc3RTdGFjay5sZW5ndGggKyAnIEFKQVggcmVxdWVzdCcgKyAocmVxdWVzdFN0YWNrLmxlbmd0aCAhPT0gMSA/ICdzJyA6ICcnKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGFqYXhUb29sYmFyUGFuZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2YtdG9vbGJhci1ibG9jay1hamF4Jyk7CiAgICAgICAgICAgIGlmIChyZXF1ZXN0U3RhY2subGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBhamF4VG9vbGJhclBhbmVsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgYWpheFRvb2xiYXJQYW5lbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChwZW5kaW5nUmVxdWVzdHMgPiAwKSB7CiAgICAgICAgICAgICAgICBhZGRDbGFzcyhhamF4VG9vbGJhclBhbmVsLCAnc2YtYWpheC1yZXF1ZXN0LWxvYWRpbmcnKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChzdWNjZXNzU3RyZWFrIDwgNCkgewogICAgICAgICAgICAgICAgYWRkQ2xhc3MoYWpheFRvb2xiYXJQYW5lbCwgJ3NmLXRvb2xiYXItc3RhdHVzLXJlZCcpOwogICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoYWpheFRvb2xiYXJQYW5lbCwgJ3NmLWFqYXgtcmVxdWVzdC1sb2FkaW5nJyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhhamF4VG9vbGJhclBhbmVsLCAnc2YtYWpheC1yZXF1ZXN0LWxvYWRpbmcnKTsKICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKGFqYXhUb29sYmFyUGFuZWwsICdzZi10b29sYmFyLXN0YXR1cy1yZWQnKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIHZhciBzdGFydEFqYXhSZXF1ZXN0ID0gZnVuY3Rpb24oaW5kZXgpIHsKICAgICAgICAgICAgdmFyIHRib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNmLXRvb2xiYXItYWpheC1yZXF1ZXN0LWxpc3QnKTsKICAgICAgICAgICAgaWYgKCF0Ym9keSkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgbmJPZkFqYXhSZXF1ZXN0ID0gdGJvZHkucm93cy5sZW5ndGg7CiAgICAgICAgICAgIGlmIChuYk9mQWpheFJlcXVlc3QgPj0gMTAwKSB7CiAgICAgICAgICAgICAgICB0Ym9keS5kZWxldGVSb3coMCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciByZXF1ZXN0ID0gcmVxdWVzdFN0YWNrW2luZGV4XTsKICAgICAgICAgICAgcGVuZGluZ1JlcXVlc3RzKys7CiAgICAgICAgICAgIHZhciByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpOwogICAgICAgICAgICByZXF1ZXN0LkRPTU5vZGUgPSByb3c7CgogICAgICAgICAgICB2YXIgcmVxdWVzdE51bWJlckNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpOwogICAgICAgICAgICByZXF1ZXN0TnVtYmVyQ2VsbC50ZXh0Q29udGVudCA9IGluZGV4ICsgMTsKICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKHJlcXVlc3ROdW1iZXJDZWxsKTsKCiAgICAgICAgICAgIHZhciBwcm9maWxlckNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpOwogICAgICAgICAgICBwcm9maWxlckNlbGwudGV4dENvbnRlbnQgPSAnbi9hJzsKICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKHByb2ZpbGVyQ2VsbCk7CgogICAgICAgICAgICB2YXIgbWV0aG9kQ2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7CiAgICAgICAgICAgIG1ldGhvZENlbGwudGV4dENvbnRlbnQgPSByZXF1ZXN0Lm1ldGhvZDsKICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKG1ldGhvZENlbGwpOwoKICAgICAgICAgICAgdmFyIHR5cGVDZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTsKICAgICAgICAgICAgdHlwZUNlbGwudGV4dENvbnRlbnQgPSByZXF1ZXN0LnR5cGU7CiAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZCh0eXBlQ2VsbCk7CgogICAgICAgICAgICB2YXIgc3RhdHVzQ29kZUNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpOwogICAgICAgICAgICB2YXIgc3RhdHVzQ29kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTsKICAgICAgICAgICAgc3RhdHVzQ29kZS50ZXh0Q29udGVudCA9ICduL2EnOwogICAgICAgICAgICBzdGF0dXNDb2RlQ2VsbC5hcHBlbmRDaGlsZChzdGF0dXNDb2RlKTsKICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKHN0YXR1c0NvZGVDZWxsKTsKCiAgICAgICAgICAgIHZhciBwYXRoQ2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7CiAgICAgICAgICAgIHBhdGhDZWxsLmNsYXNzTmFtZSA9ICdzZi1hamF4LXJlcXVlc3QtdXJsJzsKICAgICAgICAgICAgaWYgKCdHRVQnID09PSByZXF1ZXN0Lm1ldGhvZCkgewogICAgICAgICAgICAgICAgdmFyIHBhdGhMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOwogICAgICAgICAgICAgICAgcGF0aExpbmsuc2V0QXR0cmlidXRlKCdocmVmJywgcmVxdWVzdC51cmwpOwogICAgICAgICAgICAgICAgcGF0aExpbmsudGV4dENvbnRlbnQgPSByZXF1ZXN0LnVybDsKICAgICAgICAgICAgICAgIHBhdGhDZWxsLmFwcGVuZENoaWxkKHBhdGhMaW5rKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHBhdGhDZWxsLnRleHRDb250ZW50ID0gcmVxdWVzdC51cmw7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcGF0aENlbGwuc2V0QXR0cmlidXRlKCd0aXRsZScsIHJlcXVlc3QudXJsKTsKICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKHBhdGhDZWxsKTsKCiAgICAgICAgICAgIHZhciBkdXJhdGlvbkNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpOwogICAgICAgICAgICBkdXJhdGlvbkNlbGwuY2xhc3NOYW1lID0gJ3NmLWFqYXgtcmVxdWVzdC1kdXJhdGlvbic7CiAgICAgICAgICAgIGR1cmF0aW9uQ2VsbC50ZXh0Q29udGVudCA9ICduL2EnOwogICAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQoZHVyYXRpb25DZWxsKTsKCiAgICAgICAgICAgIHJlcXVlc3QubGl2ZUR1cmF0aW9uSGFuZGxlID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBkdXJhdGlvbkNlbGwudGV4dENvbnRlbnQgPSAobmV3IERhdGUoKSAtIHJlcXVlc3Quc3RhcnQpICsgJyBtcyc7CiAgICAgICAgICAgIH0sIDEwMCk7CgogICAgICAgICAgICByb3cuY2xhc3NOYW1lID0gJ3NmLWFqYXgtcmVxdWVzdCBzZi1hamF4LXJlcXVlc3QtbG9hZGluZyc7CiAgICAgICAgICAgIHRib2R5Lmluc2VydEJlZm9yZShyb3csIG51bGwpOwoKICAgICAgICAgICAgdmFyIHRvb2xiYXJJbmZvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNmLXRvb2xiYXItYmxvY2stYWpheCAuc2YtdG9vbGJhci1pbmZvJyk7CiAgICAgICAgICAgIHRvb2xiYXJJbmZvLnNjcm9sbFRvcCA9IHRvb2xiYXJJbmZvLnNjcm9sbEhlaWdodDsKCiAgICAgICAgICAgIHJlbmRlckFqYXhSZXF1ZXN0cygpOwogICAgICAgIH07CgogICAgICAgIHZhciBmaW5pc2hBamF4UmVxdWVzdCA9IGZ1bmN0aW9uKGluZGV4KSB7CiAgICAgICAgICAgIHZhciByZXF1ZXN0ID0gcmVxdWVzdFN0YWNrW2luZGV4XTsKICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChyZXF1ZXN0LmxpdmVEdXJhdGlvbkhhbmRsZSk7CgogICAgICAgICAgICBpZiAoIXJlcXVlc3QuRE9NTm9kZSkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAocmVxdWVzdC50b29sYmFyUmVwbGFjZSAmJiAhcmVxdWVzdC50b29sYmFyUmVwbGFjZUZpbmlzaGVkICYmIHJlcXVlc3QucHJvZmlsZSkgewogICAgICAgICAgICAgICAgLyogRmxhZyBhcyBjb21wbGV0ZSBiZWNhdXNlIGZpbmlzaEFqYXhSZXF1ZXN0IGNhbiBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXMuICovCiAgICAgICAgICAgICAgICByZXF1ZXN0LnRvb2xiYXJSZXBsYWNlRmluaXNoZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgLyogU2VhcmNoIHVwIHRocm91Z2ggdGhlIERPTSB0byBmaW5kIHRoZSB0b29sYmFyJ3MgY29udGFpbmVyIElELiAqLwogICAgICAgICAgICAgICAgZm9yICh2YXIgZWxlbSA9IHJlcXVlc3QuRE9NTm9kZTsgZWxlbSAmJiBlbGVtICE9PSBkb2N1bWVudDsgZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgewogICAgICAgICAgICAgICAgICAgIGlmIChlbGVtLmlkLm1hdGNoKC9ec2Z3ZHQvKSkgewogICAgICAgICAgICAgICAgICAgICAgICBTZmpzLmxvYWRUb29sYmFyKGVsZW0uaWQucmVwbGFjZSgvXnNmd2R0LywgJycpLCByZXF1ZXN0LnByb2ZpbGUpOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHBlbmRpbmdSZXF1ZXN0cy0tOwogICAgICAgICAgICB2YXIgcm93ID0gcmVxdWVzdC5ET01Ob2RlOwogICAgICAgICAgICAvKiBVbnBhY2sgdGhlIGNoaWxkcmVuIGZyb20gdGhlIHJvdyAqLwogICAgICAgICAgICB2YXIgcHJvZmlsZXJDZWxsID0gcm93LmNoaWxkcmVuWzFdOwogICAgICAgICAgICB2YXIgbWV0aG9kQ2VsbCA9IHJvdy5jaGlsZHJlblsyXTsKICAgICAgICAgICAgdmFyIHN0YXR1c0NvZGVDZWxsID0gcm93LmNoaWxkcmVuWzRdOwogICAgICAgICAgICB2YXIgc3RhdHVzQ29kZUVsZW0gPSBzdGF0dXNDb2RlQ2VsbC5jaGlsZHJlblswXTsKICAgICAgICAgICAgdmFyIGR1cmF0aW9uQ2VsbCA9IHJvdy5jaGlsZHJlbls2XTsKCiAgICAgICAgICAgIGlmIChyZXF1ZXN0LmVycm9yKSB7CiAgICAgICAgICAgICAgICByb3cuY2xhc3NOYW1lID0gJ3NmLWFqYXgtcmVxdWVzdCBzZi1hamF4LXJlcXVlc3QtZXJyb3InOwogICAgICAgICAgICAgICAgbWV0aG9kQ2VsbC5jbGFzc05hbWUgPSAnc2YtYWpheC1yZXF1ZXN0LWVycm9yJzsKICAgICAgICAgICAgICAgIHN1Y2Nlc3NTdHJlYWsgPSAwOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcm93LmNsYXNzTmFtZSA9ICdzZi1hamF4LXJlcXVlc3Qgc2YtYWpheC1yZXF1ZXN0LW9rJzsKICAgICAgICAgICAgICAgIHN1Y2Nlc3NTdHJlYWsrKzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzQ29kZSkgewogICAgICAgICAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzQ29kZSA8IDMwMCkgewogICAgICAgICAgICAgICAgICAgIHN0YXR1c0NvZGVFbGVtLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnc2YtdG9vbGJhci1zdGF0dXMnKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVxdWVzdC5zdGF0dXNDb2RlIDwgNDAwKSB7CiAgICAgICAgICAgICAgICAgICAgc3RhdHVzQ29kZUVsZW0uc2V0QXR0cmlidXRlKCdjbGFzcycsICdzZi10b29sYmFyLXN0YXR1cyBzZi10b29sYmFyLXN0YXR1cy15ZWxsb3cnKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgc3RhdHVzQ29kZUVsZW0uc2V0QXR0cmlidXRlKCdjbGFzcycsICdzZi10b29sYmFyLXN0YXR1cyBzZi10b29sYmFyLXN0YXR1cy1yZWQnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHN0YXR1c0NvZGVFbGVtLnRleHRDb250ZW50ID0gcmVxdWVzdC5zdGF0dXNDb2RlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgc3RhdHVzQ29kZUVsZW0uc2V0QXR0cmlidXRlKCdjbGFzcycsICdzZi10b29sYmFyLXN0YXR1cyBzZi10b29sYmFyLXN0YXR1cy1yZWQnKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHJlcXVlc3QuZHVyYXRpb24pIHsKICAgICAgICAgICAgICAgIGR1cmF0aW9uQ2VsbC50ZXh0Q29udGVudCA9IHJlcXVlc3QuZHVyYXRpb24gKyAnIG1zJzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHJlcXVlc3QucHJvZmlsZXJVcmwpIHsKICAgICAgICAgICAgICAgIHByb2ZpbGVyQ2VsbC50ZXh0Q29udGVudCA9ICcnOwogICAgICAgICAgICAgICAgdmFyIHByb2ZpbGVyTGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKICAgICAgICAgICAgICAgIHByb2ZpbGVyTGluay5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCByZXF1ZXN0LnByb2ZpbGVyVXJsKTsKICAgICAgICAgICAgICAgIHByb2ZpbGVyTGluay50ZXh0Q29udGVudCA9IHJlcXVlc3QucHJvZmlsZTsKICAgICAgICAgICAgICAgIHByb2ZpbGVyQ2VsbC5hcHBlbmRDaGlsZChwcm9maWxlckxpbmspOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZW5kZXJBamF4UmVxdWVzdHMoKTsKICAgICAgICB9OwoKICAgICAgICB7JSBpZiBleGNsdWRlZF9hamF4X3BhdGhzIGlzIGRlZmluZWQgJX0KICAgICAgICAgICAgaWYgKHdpbmRvdy5mZXRjaCAmJiB3aW5kb3cuZmV0Y2gucG9seWZpbGwgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgdmFyIG9sZEZldGNoID0gd2luZG93LmZldGNoOwogICAgICAgICAgICAgICAgd2luZG93LmZldGNoID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIHZhciBwcm9taXNlID0gb2xkRmV0Y2guYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gYXJndW1lbnRzWzBdOwogICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHNbMV07CiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmFtVHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudHNbMF0pOwogICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbVR5cGUgPT09ICdbb2JqZWN0IFJlcXVlc3RdJykgewogICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSBhcmd1bWVudHNbMF0udXJsOwogICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IGFyZ3VtZW50c1swXS5tZXRob2QsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVkZW50aWFsczogYXJndW1lbnRzWzBdLmNyZWRlbnRpYWxzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogYXJndW1lbnRzWzBdLmhlYWRlcnMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlOiBhcmd1bWVudHNbMF0ubW9kZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0OiBhcmd1bWVudHNbMF0ucmVkaXJlY3QKICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSBTdHJpbmcodXJsKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKCF1cmwubWF0Y2gobmV3IFJlZ0V4cCh7eyBleGNsdWRlZF9hamF4X3BhdGhzfGpzb25fZW5jb2RlfHJhdyB9fSkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXRob2QgPSAnR0VUJzsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtcyAmJiBwYXJhbXMubWV0aG9kICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZCA9IHBhcmFtcy5tZXRob2Q7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGFja0VsZW1lbnQgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHVybCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2ZldGNoJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBuZXcgRGF0ZSgpCiAgICAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWR4ID0gcmVxdWVzdFN0YWNrLnB1c2goc3RhY2tFbGVtZW50KSAtIDE7CiAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbiAocikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2tFbGVtZW50LmR1cmF0aW9uID0gbmV3IERhdGUoKSAtIHN0YWNrRWxlbWVudC5zdGFydDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrRWxlbWVudC5lcnJvciA9IHIuc3RhdHVzIDwgMjAwIHx8IHIuc3RhdHVzID49IDQwMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrRWxlbWVudC5zdGF0dXNDb2RlID0gci5zdGF0dXM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFja0VsZW1lbnQucHJvZmlsZSA9IHIuaGVhZGVycy5nZXQoJ3gtZGVidWctdG9rZW4nKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrRWxlbWVudC5wcm9maWxlclVybCA9IHIuaGVhZGVycy5nZXQoJ3gtZGVidWctdG9rZW4tbGluaycpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2tFbGVtZW50LnRvb2xiYXJSZXBsYWNlRmluaXNoZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrRWxlbWVudC50b29sYmFyUmVwbGFjZSA9ICcxJyA9PT0gci5oZWFkZXJzLmdldCgnU3ltZm9ueS1EZWJ1Zy1Ub29sYmFyLVJlcGxhY2UnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmlzaEFqYXhSZXF1ZXN0KGlkeCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrRWxlbWVudC5lcnJvciA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5pc2hBamF4UmVxdWVzdChpZHgpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRBamF4UmVxdWVzdChpZHgpOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2U7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh3aW5kb3cuWE1MSHR0cFJlcXVlc3QgJiYgWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIpIHsKICAgICAgICAgICAgICAgIHZhciBwcm94aWVkID0gWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLm9wZW47CgogICAgICAgICAgICAgICAgWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbihtZXRob2QsIHVybCwgYXN5bmMsIHVzZXIsIHBhc3MpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CgogICAgICAgICAgICAgICAgICAgIC8qIHByZXZlbnQgbG9nZ2luZyBBSkFYIGNhbGxzIHRvIHN0YXRpYyBhbmQgaW5saW5lIGZpbGVzLCBsaWtlIHRlbXBsYXRlcyAqLwogICAgICAgICAgICAgICAgICAgIHZhciBwYXRoID0gdXJsOwogICAgICAgICAgICAgICAgICAgIGlmICh1cmwuc2xpY2UoMCwgMSkgPT09ICcvJykgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gdXJsLmluZGV4T2YoJ3t7IHJlcXVlc3QuYmFzZVBhdGh8ZSgnanMnKSB9fScpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoID0gdXJsLnNsaWNlKHt7IHJlcXVlc3QuYmFzZVBhdGh8bGVuZ3RoIH19KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgwID09PSB1cmwuaW5kZXhPZigne3sgKHJlcXVlc3Quc2NoZW1lQW5kSHR0cEhvc3QgfiByZXF1ZXN0LmJhc2VQYXRoKXxlKCdqcycpIH19JykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcGF0aCA9IHVybC5zbGljZSh7eyAocmVxdWVzdC5zY2hlbWVBbmRIdHRwSG9zdCB+IHJlcXVlc3QuYmFzZVBhdGgpfGxlbmd0aCB9fSk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAoIXBhdGgubWF0Y2gobmV3IFJlZ0V4cCh7eyBleGNsdWRlZF9hamF4X3BhdGhzfGpzb25fZW5jb2RlfHJhdyB9fSkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGFja0VsZW1lbnQgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHVybCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3hocicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogbmV3IERhdGUoKQogICAgICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkeCA9IHJlcXVlc3RTdGFjay5wdXNoKHN0YWNrRWxlbWVudCkgLSAxOwoKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdyZWFkeXN0YXRlY2hhbmdlJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5yZWFkeVN0YXRlID09IDQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFja0VsZW1lbnQuZHVyYXRpb24gPSBuZXcgRGF0ZSgpIC0gc3RhY2tFbGVtZW50LnN0YXJ0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrRWxlbWVudC5lcnJvciA9IHNlbGYuc3RhdHVzIDwgMjAwIHx8IHNlbGYuc3RhdHVzID49IDQwMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFja0VsZW1lbnQuc3RhdHVzQ29kZSA9IHNlbGYuc3RhdHVzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhY3RIZWFkZXJzKHNlbGYsIHN0YWNrRWxlbWVudCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmlzaEFqYXhSZXF1ZXN0KGlkeCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZhbHNlKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0QWpheFJlcXVlc3QoaWR4KTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHByb3hpZWQuYXBwbHkodGhpcywgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgeyUgZW5kaWYgJX0KCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgaGFzQ2xhc3M6IGhhc0NsYXNzLAoKICAgICAgICAgICAgcmVtb3ZlQ2xhc3M6IHJlbW92ZUNsYXNzLAoKICAgICAgICAgICAgYWRkQ2xhc3M6IGFkZENsYXNzLAoKICAgICAgICAgICAgdG9nZ2xlQ2xhc3M6IHRvZ2dsZUNsYXNzLAoKICAgICAgICAgICAgZ2V0UHJlZmVyZW5jZTogZ2V0UHJlZmVyZW5jZSwKCiAgICAgICAgICAgIHNldFByZWZlcmVuY2U6IHNldFByZWZlcmVuY2UsCgogICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyOiBhZGRFdmVudExpc3RlbmVyLAoKICAgICAgICAgICAgcmVxdWVzdDogcmVxdWVzdCwKCiAgICAgICAgICAgIHJlbmRlckFqYXhSZXF1ZXN0czogcmVuZGVyQWpheFJlcXVlc3RzLAoKICAgICAgICAgICAgZ2V0U2Z3ZHQ6IGZ1bmN0aW9uKHRva2VuKSB7CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc2Z3ZHQpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnNmd2R0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Nmd2R0JyArIHRva2VuKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZndkdDsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uKHNlbGVjdG9yLCB1cmwsIG9uU3VjY2Vzcywgb25FcnJvciwgb3B0aW9ucykgewogICAgICAgICAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc2VsZWN0b3IpOwoKICAgICAgICAgICAgICAgIGlmIChlbCAmJiBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2Z1cmwnKSAhPT0gdXJsKSB7CiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdCgKICAgICAgICAgICAgICAgICAgICAgICAgdXJsLAogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbih4aHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLmlubmVySFRNTCA9IHhoci5yZXNwb25zZVRleHQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc2Z1cmwnLCB1cmwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoZWwsICdsb2FkaW5nJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGVuZGluZyA9IHBlbmRpbmdSZXF1ZXN0czsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVxdWVzdFN0YWNrLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRBamF4UmVxdWVzdChpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdFN0YWNrW2ldLmR1cmF0aW9uKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmlzaEFqYXhSZXF1ZXN0KGkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFJldmVydCB0aGUgcGVuZGluZyBzdGF0ZSBpbiBjYXNlIHRoZXJlIHdhcyBhIHN0YXJ0IGNhbGxlZCB3aXRob3V0IGEgZmluaXNoIGFib3ZlLiAqLwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVuZGluZ1JlcXVlc3RzID0gcGVuZGluZzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvblN1Y2Nlc3MgfHwgbm9vcCkoeGhyLCBlbCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHhocikgeyAob25FcnJvciB8fCBub29wKSh4aHIsIGVsKTsgfSwKICAgICAgICAgICAgICAgICAgICAgICAgJycsCiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMKICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgc2hvd1Rvb2xiYXI6IGZ1bmN0aW9uKHRva2VuKSB7CiAgICAgICAgICAgICAgICB2YXIgc2Z3ZHQgPSB0aGlzLmdldFNmd2R0KHRva2VuKTsKICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHNmd2R0LCAnc2YtZGlzcGxheS1ub25lJyk7CgogICAgICAgICAgICAgICAgaWYgKGdldFByZWZlcmVuY2UoJ3Rvb2xiYXIvZGlzcGxheVN0YXRlJykgPT0gJ25vbmUnKSB7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NmVG9vbGJhck1haW5Db250ZW50LScgKyB0b2tlbikuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2ZUb29sYmFyQ2xlYXJlci0nICsgdG9rZW4pLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NmTWluaVRvb2xiYXItJyArIHRva2VuKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NmVG9vbGJhck1haW5Db250ZW50LScgKyB0b2tlbikuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NmVG9vbGJhckNsZWFyZXItJyArIHRva2VuKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2ZNaW5pVG9vbGJhci0nICsgdG9rZW4pLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBoaWRlVG9vbGJhcjogZnVuY3Rpb24odG9rZW4pIHsKICAgICAgICAgICAgICAgIHZhciBzZndkdCA9IHRoaXMuZ2V0U2Z3ZHQodG9rZW4pOwogICAgICAgICAgICAgICAgYWRkQ2xhc3Moc2Z3ZHQsICdzZi1kaXNwbGF5LW5vbmUnKTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGluaXRUb29sYmFyOiBmdW5jdGlvbih0b2tlbikgewogICAgICAgICAgICAgICAgdGhpcy5zaG93VG9vbGJhcih0b2tlbik7CgogICAgICAgICAgICAgICAgdmFyIGhpZGVCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2ZUb29sYmFySGlkZUJ1dHRvbi0nICsgdG9rZW4pOwogICAgICAgICAgICAgICAgdmFyIGhpZGVCdXR0b25TdmcgPSBoaWRlQnV0dG9uLnF1ZXJ5U2VsZWN0b3IoJ3N2ZycpOwogICAgICAgICAgICAgICAgaGlkZUJ1dHRvblN2Zy5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTsKICAgICAgICAgICAgICAgIGhpZGVCdXR0b25Tdmcuc2V0QXR0cmlidXRlKCdmb2N1c2FibGUnLCAnZmFsc2UnKTsKICAgICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoaGlkZUJ1dHRvbiwgJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKCiAgICAgICAgICAgICAgICAgICAgdmFyIHAgPSB0aGlzLnBhcmVudE5vZGU7CiAgICAgICAgICAgICAgICAgICAgcC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgIChwLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgfHwgcC5wcmV2aW91c1NpYmxpbmcpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NmTWluaVRvb2xiYXItJyArIHRva2VuKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgICAgICAgICAgICAgICAgICBzZXRQcmVmZXJlbmNlKCd0b29sYmFyL2Rpc3BsYXlTdGF0ZScsICdub25lJyk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICB2YXIgc2hvd0J1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZlRvb2xiYXJNaW5pVG9nZ2xlci0nICsgdG9rZW4pOwogICAgICAgICAgICAgICAgdmFyIHNob3dCdXR0b25TdmcgPSBzaG93QnV0dG9uLnF1ZXJ5U2VsZWN0b3IoJ3N2ZycpOwogICAgICAgICAgICAgICAgc2hvd0J1dHRvblN2Zy5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTsKICAgICAgICAgICAgICAgIHNob3dCdXR0b25Tdmcuc2V0QXR0cmlidXRlKCdmb2N1c2FibGUnLCAnZmFsc2UnKTsKICAgICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoc2hvd0J1dHRvbiwgJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKCiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW0gPSB0aGlzLnBhcmVudE5vZGU7CiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW0uc3R5bGUuZGlzcGxheSA9PSAnbm9uZScpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NmVG9vbGJhck1haW5Db250ZW50LScgKyB0b2tlbikuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NmVG9vbGJhckNsZWFyZXItJyArIHRva2VuKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgICAgICBlbGVtLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZlRvb2xiYXJNYWluQ29udGVudC0nICsgdG9rZW4pLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2ZUb29sYmFyQ2xlYXJlci0nICsgdG9rZW4pLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgICAgICAgICAgICAgICAgICAgICBlbGVtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZScKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHNldFByZWZlcmVuY2UoJ3Rvb2xiYXIvZGlzcGxheVN0YXRlJywgJ2Jsb2NrJyk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGxvYWRUb29sYmFyOiBmdW5jdGlvbih0b2tlbiwgbmV3VG9rZW4pIHsKICAgICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpczsKICAgICAgICAgICAgICAgIHZhciB0cmllc0NvdW50ZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2ZMb2FkQ291bnRlci0nICsgdG9rZW4pOwoKICAgICAgICAgICAgICAgIHZhciBvcHRpb25zID0gewogICAgICAgICAgICAgICAgICAgIHJldHJ5OiB0cnVlLAogICAgICAgICAgICAgICAgICAgIG9uU2VuZDogZnVuY3Rpb24gKGNvdW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3VudCA9PT0gMykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5pbml0VG9vbGJhcih0b2tlbik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmllc0NvdW50ZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyaWVzQ291bnRlci50ZXh0Q29udGVudCA9IGNvdW50OwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgdmFyIGNhbmNlbEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZkxvYWRDYW5jZWwtJyArIHRva2VuKTsKICAgICAgICAgICAgICAgIGlmIChjYW5jZWxCdXR0b24pIHsKICAgICAgICAgICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKGNhbmNlbEJ1dHRvbiwgJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CgogICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnN0b3AgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmhpZGVUb29sYmFyKHRva2VuKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBuZXdUb2tlbiA9IChuZXdUb2tlbiB8fCB0b2tlbik7CgogICAgICAgICAgICAgICAgdGhpcy5sb2FkKAogICAgICAgICAgICAgICAgICAgICdzZndkdCcgKyB0b2tlbiwKICAgICAgICAgICAgICAgICAgICAne3sgdXJsKFwiX3dkdFwiLCB7IFwidG9rZW5cIjogXCJ4eHh4eHhcIiB9KXxlc2NhcGUoJ2pzJykgfX0nLnJlcGxhY2UoL3h4eHh4eC8sIG5ld1Rva2VuKSwKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbih4aHIsIGVsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8qIERvIG5vdGhpbmcgaW4gdGhlIGVkZ2UgY2FzZSB3aGVyZSB0aGUgdG9vbGJhciBoYXMgYWxyZWFkeSBiZWVuIHJlcGxhY2VkIHdpdGggYSBuZXcgb25lICovCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NmVG9vbGJhck1haW5Db250ZW50LScgKyBuZXdUb2tlbikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgLyogRXZhbHVhdGUgaW4gZ2xvYmFsIHNjb3BlIHNjcmlwdHMgZW1iZWRkZWQgaW5zaWRlIHRoZSB0b29sYmFyICovCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpLCBzY3JpcHRzID0gW10uc2xpY2UuY2FsbChlbC5xdWVyeVNlbGVjdG9yQWxsKCdzY3JpcHQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmFsLmNhbGwoe30sIHNjcmlwdHNbaV0uZmlyc3RDaGlsZC5ub2RlVmFsdWUpOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gLTEgIT09IHhoci5yZXNwb25zZVRleHQuaW5kZXhPZignc2YtdG9vbGJhcnJlc2V0JykgPyAnYmxvY2snIDogJ25vbmUnOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsLnN0eWxlLmRpc3BsYXkgPT0gJ25vbmUnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuaW5pdFRvb2xiYXIobmV3VG9rZW4pOwoKICAgICAgICAgICAgICAgICAgICAgICAgLyogSGFuZGxlIHRvb2xiYXItaW5mbyBwb3NpdGlvbiAqLwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9vbGJhckJsb2NrcyA9IFtdLnNsaWNlLmNhbGwoZWwucXVlcnlTZWxlY3RvckFsbCgnLnNmLXRvb2xiYXItYmxvY2snKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0b29sYmFyQmxvY2tzLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sYmFyQmxvY2tzW2ldLm9ubW91c2VvdmVyID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b29sYmFySW5mbyA9IHRoaXMucXVlcnlTZWxlY3RvckFsbCgnLnNmLXRvb2xiYXItaW5mbycpWzBdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYWdlV2lkdGggPSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50V2lkdGggPSB0b29sYmFySW5mby5vZmZzZXRXaWR0aDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGVmdFZhbHVlID0gKGVsZW1lbnRXaWR0aCArIHRoaXMub2Zmc2V0TGVmdCkgLSBwYWdlV2lkdGg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJpZ2h0VmFsdWUgPSAoZWxlbWVudFdpZHRoICsgKHBhZ2VXaWR0aCAtIHRoaXMub2Zmc2V0TGVmdCkpIC0gcGFnZVdpZHRoOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBSZXNldCByaWdodCBhbmQgbGVmdCB2YWx1ZSwgdXNlZnVsIG9uIHdpbmRvdyByZXNpemUgKi8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sYmFySW5mby5zdHlsZS5yaWdodCA9ICcnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xiYXJJbmZvLnN0eWxlLmxlZnQgPSAnJzsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRXaWR0aCA+IHBhZ2VXaWR0aCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sYmFySW5mby5zdHlsZS5sZWZ0ID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobGVmdFZhbHVlID4gMCAmJiByaWdodFZhbHVlID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sYmFySW5mby5zdHlsZS5yaWdodCA9IChyaWdodFZhbHVlICogLTEpICsgJ3B4JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxlZnRWYWx1ZSA8IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbGJhckluZm8uc3R5bGUubGVmdCA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbGJhckluZm8uc3R5bGUucmlnaHQgPSAnMHB4JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJBamF4UmVxdWVzdHMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2YtdG9vbGJhci1hamF4LWNsZWFyJyksICdjbGljaycsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFN0YWNrID0gW107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJBamF4UmVxdWVzdHMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NTdHJlYWsgPSA0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNmLXRvb2xiYXItYWpheC1yZXF1ZXN0LWxpc3QnKS5pbm5lckhUTUwgPSAnJzsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNmLXRvb2xiYXItYmxvY2stYWpheCcpLCAnbW91c2VlbnRlcicsIGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2YtdG9vbGJhci1ibG9jay1hamF4IC5zZi10b29sYmFyLWluZm8nKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0uc2Nyb2xsVG9wID0gZWxlbS5zY3JvbGxIZWlnaHQ7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZi10b29sYmFyLWJsb2NrLWFqYXggPiAuc2YtdG9vbGJhci1pY29uJyksICdjbGljaycsIGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLnBhcmVudE5vZGUsICdob3ZlcicpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkdW1wSW5mbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZi10b29sYmFyLWJsb2NrLWR1bXAgLnNmLXRvb2xiYXItaW5mbycpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gZHVtcEluZm8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZHVtcEluZm8sICdzZmJlZm9yZWR1bXBjb2xsYXBzZScsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdW1wSW5mby5zdHlsZS5taW5IZWlnaHQgPSBkdW1wSW5mby5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQrJ3B4JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihkdW1wSW5mbywgJ21vdXNlbGVhdmUnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVtcEluZm8uc3R5bGUubWluSGVpZ2h0ID0gJyc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oeGhyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzICE9PSAwICYmICFvcHRpb25zLnN0b3ApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZndkdCA9IHRoYXQuZ2V0U2Z3ZHQodG9rZW4pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Z3ZHQuaW5uZXJIVE1MID0gJ1xcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNmLXRvb2xiYXJyZXNldFwiPlxcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZi10b29sYmFyLWljb25cIj48c3ZnIHdpZHRoPVwiMjZcIiBoZWlnaHQ9XCIyOFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2ZXJzaW9uPVwiMS4xXCIgeD1cIjBweFwiIHk9XCIwcHhcIiB2aWV3Qm94PVwiMCAwIDI2IDI4XCIgZW5hYmxlLWJhY2tncm91bmQ9XCJuZXcgMCAwIDI2IDI4XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj48cGF0aCBmaWxsPVwiI0ZGRkZGRlwiIGQ9XCJNMTMgMEM1LjggMCAwIDUuOCAwIDEzYzAgNy4yIDUuOCAxMyAxMyAxM2M3LjIgMCAxMy01LjggMTMtMTNDMjYgNS44IDIwLjIgMCAxMyAweiBNMjAgNy41IGMtMC42IDAtMS0wLjMtMS0wLjljMC0wLjIgMC0wLjQgMC4yLTAuNmMwLjEtMC4zIDAuMi0wLjMgMC4yLTAuNGMwLTAuMy0wLjUtMC40LTAuNy0wLjRjLTIgMC4xLTIuNSAyLjctMi45IDQuOGwtMC4yIDEuMSBjMS4xIDAuMiAxLjkgMCAyLjQtMC4zYzAuNi0wLjQtMC4yLTAuOC0wLjEtMS4zQzE4IDkuMiAxOC40IDkgMTguNyA4LjljMC41IDAgMC44IDAuNSAwLjggMWMwIDAuOC0xLjEgMi0zLjMgMS45IGMtMC4zIDAtMC41IDAtMC43LTAuMUwxNSAxNC4xYy0wLjQgMS43LTAuOSA0LjEtMi42IDYuMmMtMS41IDEuOC0zLjEgMi4xLTMuOCAyLjFjLTEuMyAwLTIuMS0wLjYtMi4yLTEuNmMwLTAuOSAwLjgtMS40IDEuMy0xLjQgYzAuNyAwIDEuMiAwLjUgMS4yIDEuMWMwIDAuNS0wLjIgMC42LTAuNCAwLjdjLTAuMSAwLjEtMC4zIDAuMi0wLjMgMC40YzAgMC4xIDAuMSAwLjMgMC40IDAuM2MwLjUgMCAwLjktMC4zIDEuMi0wLjUgYzEuMy0xIDEuNy0yLjkgMi40LTYuMmwwLjEtMC44YzAuMi0xLjEgMC41LTIuMyAwLjgtMy41Yy0wLjktMC43LTEuNC0xLjUtMi42LTEuOGMtMC44LTAuMi0xLjMgMC0xLjcgMC40QzguNCAxMCA4LjYgMTAuNyA5IDExLjEgbDAuNyAwLjdjMC44IDAuOSAxLjMgMS43IDEuMSAyLjdjLTAuMyAxLjYtMi4xIDIuOC00LjMgMi4xYy0xLjktMC42LTIuMi0xLjktMi0yLjdjMC4yLTAuNiAwLjctMC44IDEuMi0wLjYgYzAuNSAwLjIgMC43IDAuOCAwLjYgMS4zYzAgMC4xIDAgMC4xLTAuMSAwLjNDNiAxNSA1LjkgMTUuMiA1LjkgMTUuM2MtMC4xIDAuNCAwLjQgMC43IDAuOCAwLjhjMC44IDAuMyAxLjctMC4yIDEuOS0wLjkgYzAuMi0wLjYtMC4yLTEuMS0wLjQtMS4ybC0wLjgtMC45Yy0wLjQtMC40LTEuMi0xLjUtMC44LTIuOGMwLjItMC41IDAuNS0xIDAuOS0xLjRjMS0wLjcgMi0wLjggMy0wLjZjMS4zIDAuNCAxLjkgMS4yIDIuOCAxLjkgYzAuNS0xLjMgMS4xLTIuNiAyLTMuOGMwLjktMSAyLTEuNyAzLjMtMS44QzIwIDQuOCAyMSA1LjQgMjEgNi4zQzIxIDYuNyAyMC44IDcuNSAyMCA3LjV6XCIvPjwvc3ZnPjwvZGl2PlxcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFuIGVycm9yIG9jY3VycmVkIHdoaWxlIGxvYWRpbmcgdGhlIHdlYiBkZWJ1ZyB0b29sYmFyLiA8YSBocmVmPVwie3sgdXJsKFwiX3Byb2ZpbGVyX2hvbWVcIil8ZXNjYXBlKCdqcycpIH19JyArIG5ld1Rva2VuICsgJ1wiPk9wZW4gdGhlIHdlYiBwcm9maWxlci48L2E+XFwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNmd2R0LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnc2YtdG9vbGJhciBzZi1lcnJvci10b29sYmFyJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIG9wdGlvbnMKICAgICAgICAgICAgICAgICk7CgogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICB0b2dnbGU6IGZ1bmN0aW9uKHNlbGVjdG9yLCBlbE9uLCBlbE9mZikgewogICAgICAgICAgICAgICAgdmFyIHRtcCA9IGVsT24uc3R5bGUuZGlzcGxheSwKICAgICAgICAgICAgICAgICAgICBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNlbGVjdG9yKTsKCiAgICAgICAgICAgICAgICBlbE9uLnN0eWxlLmRpc3BsYXkgPSBlbE9mZi5zdHlsZS5kaXNwbGF5OwogICAgICAgICAgICAgICAgZWxPZmYuc3R5bGUuZGlzcGxheSA9IHRtcDsKCiAgICAgICAgICAgICAgICBpZiAoZWwpIHsKICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnID09PSB0bXAgPyAnbm9uZScgOiAnYmxvY2snOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgY3JlYXRlVGFiczogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YXIgdGFiR3JvdXBzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNmLXRhYnM6bm90KFtkYXRhLXByb2Nlc3NlZD10cnVlXSknKTsKCiAgICAgICAgICAgICAgICAvKiBjcmVhdGUgdGhlIHRhYiBuYXZpZ2F0aW9uIGZvciBlYWNoIGdyb3VwIG9mIHRhYnMgKi8KICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFiR3JvdXBzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHRhYnMgPSB0YWJHcm91cHNbaV0ucXVlcnlTZWxlY3RvckFsbCgnOnNjb3BlID4gLnRhYicpOwogICAgICAgICAgICAgICAgICAgIHZhciB0YWJOYXZpZ2F0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTsKICAgICAgICAgICAgICAgICAgICB0YWJOYXZpZ2F0aW9uLmNsYXNzTmFtZSA9ICd0YWItbmF2aWdhdGlvbic7CgogICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZFRhYklkID0gJ3RhYi0nICsgaSArICctMCc7IC8qIHNlbGVjdCB0aGUgZmlyc3QgdGFiIGJ5IGRlZmF1bHQgKi8KICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRhYnMubGVuZ3RoOyBqKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhYklkID0gJ3RhYi0nICsgaSArICctJyArIGo7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YWJUaXRsZSA9IHRhYnNbal0ucXVlcnlTZWxlY3RvcignLnRhYi10aXRsZScpLmlubmVySFRNTDsKCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YWJOYXZpZ2F0aW9uSXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRhYk5hdmlnYXRpb25JdGVtLnNldEF0dHJpYnV0ZSgnZGF0YS10YWItaWQnLCB0YWJJZCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNDbGFzcyh0YWJzW2pdLCAnYWN0aXZlJykpIHsgc2VsZWN0ZWRUYWJJZCA9IHRhYklkOyB9CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNDbGFzcyh0YWJzW2pdLCAnZGlzYWJsZWQnKSkgeyBhZGRDbGFzcyh0YWJOYXZpZ2F0aW9uSXRlbSwgJ2Rpc2FibGVkJyk7IH0KICAgICAgICAgICAgICAgICAgICAgICAgdGFiTmF2aWdhdGlvbkl0ZW0uaW5uZXJIVE1MID0gdGFiVGl0bGU7CiAgICAgICAgICAgICAgICAgICAgICAgIHRhYk5hdmlnYXRpb24uYXBwZW5kQ2hpbGQodGFiTmF2aWdhdGlvbkl0ZW0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhYkNvbnRlbnQgPSB0YWJzW2pdLnF1ZXJ5U2VsZWN0b3IoJy50YWItY29udGVudCcpOwogICAgICAgICAgICAgICAgICAgICAgICB0YWJDb250ZW50LnBhcmVudEVsZW1lbnQuc2V0QXR0cmlidXRlKCdpZCcsIHRhYklkKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHRhYkdyb3Vwc1tpXS5pbnNlcnRCZWZvcmUodGFiTmF2aWdhdGlvbiwgdGFiR3JvdXBzW2ldLmZpcnN0Q2hpbGQpOwogICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXRhYi1pZD1cIicgKyBzZWxlY3RlZFRhYklkICsgJ1wiXScpLCAnYWN0aXZlJyk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLyogZGlzcGxheSB0aGUgYWN0aXZlIHRhYiBhbmQgYWRkIHRoZSAnY2xpY2snIGV2ZW50IGxpc3RlbmVycyAqLwogICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRhYkdyb3Vwcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgIHRhYk5hdmlnYXRpb24gPSB0YWJHcm91cHNbaV0ucXVlcnlTZWxlY3RvckFsbCgnOnNjb3BlID4gLnRhYi1uYXZpZ2F0aW9uIGxpJyk7CgogICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCB0YWJOYXZpZ2F0aW9uLmxlbmd0aDsgaisrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRhYklkID0gdGFiTmF2aWdhdGlvbltqXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGFiLWlkJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhYklkKS5xdWVyeVNlbGVjdG9yKCcudGFiLXRpdGxlJykuY2xhc3NOYW1lID0gJ2hpZGRlbic7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzQ2xhc3ModGFiTmF2aWdhdGlvbltqXSwgJ2FjdGl2ZScpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YWJJZCkuY2xhc3NOYW1lID0gJ2Jsb2NrJzsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhYklkKS5jbGFzc05hbWUgPSAnaGlkZGVuJzsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgdGFiTmF2aWdhdGlvbltqXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhY3RpdmVUYWIgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbmVlZGVkIGJlY2F1c2Ugd2hlbiB0aGUgdGFiIGNvbnRhaW5zIEhUTUwgY29udGVudHMsIHVzZXIgY2FuIGNsaWNrICovCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBvbiBhbnkgb2YgdGhvc2UgZWxlbWVudHMgaW5zdGVhZCBvZiB0aGVpciBwYXJlbnQgJzxsaT4nIGVsZW1lbnQgKi8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChhY3RpdmVUYWIudGFnTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAnbGknKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlVGFiID0gYWN0aXZlVGFiLnBhcmVudE5vZGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZ2V0IHRoZSBmdWxsIGxpc3Qgb2YgdGFicyB0aHJvdWdoIHRoZSBwYXJlbnQgb2YgdGhlIGFjdGl2ZSB0YWIgZWxlbWVudCAqLwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhYk5hdmlnYXRpb24gPSBhY3RpdmVUYWIucGFyZW50Tm9kZS5jaGlsZHJlbjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGFiTmF2aWdhdGlvbi5sZW5ndGg7IGsrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YWJJZCA9IHRhYk5hdmlnYXRpb25ba10uZ2V0QXR0cmlidXRlKCdkYXRhLXRhYi1pZCcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhYklkKS5jbGFzc05hbWUgPSAnaGlkZGVuJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyh0YWJOYXZpZ2F0aW9uW2tdLCAnYWN0aXZlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3MoYWN0aXZlVGFiLCAnYWN0aXZlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aXZlVGFiSWQgPSBhY3RpdmVUYWIuZ2V0QXR0cmlidXRlKCdkYXRhLXRhYi1pZCcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYWN0aXZlVGFiSWQpLmNsYXNzTmFtZSA9ICdibG9jayc7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgdGFiR3JvdXBzW2ldLnNldEF0dHJpYnV0ZSgnZGF0YS1wcm9jZXNzZWQnLCAndHJ1ZScpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgY3JlYXRlVG9nZ2xlczogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YXIgdG9nZ2xlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZi10b2dnbGU6bm90KFtkYXRhLXByb2Nlc3NlZD10cnVlXSknKTsKCiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvZ2dsZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudFNlbGVjdG9yID0gdG9nZ2xlc1tpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9nZ2xlLXNlbGVjdG9yJyk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsZW1lbnRTZWxlY3Rvcik7CgogICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQsICdzZi10b2dnbGUtY29udGVudCcpOwoKICAgICAgICAgICAgICAgICAgICBpZiAodG9nZ2xlc1tpXS5oYXNBdHRyaWJ1dGUoJ2RhdGEtdG9nZ2xlLWluaXRpYWwnKSAmJiB0b2dnbGVzW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS10b2dnbGUtaW5pdGlhbCcpID09ICdkaXNwbGF5JykgewogICAgICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyh0b2dnbGVzW2ldLCAnc2YtdG9nZ2xlLW9uJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQsICdzZi10b2dnbGUtdmlzaWJsZScpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKHRvZ2dsZXNbaV0sICdzZi10b2dnbGUtb2ZmJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQsICdzZi10b2dnbGUtaGlkZGVuJyk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKHRvZ2dsZXNbaV0sICdjbGljaycsIGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCcnICE9PSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkudG9TdHJpbmcoKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogRG9uJ3QgZG8gYW55dGhpbmcgb24gdGV4dCBzZWxlY3Rpb24gKi8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvZ2dsZSA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudDsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8qIG5lZWRlZCBiZWNhdXNlIHdoZW4gdGhlIHRvZ2dsZSBjb250YWlucyBIVE1MIGNvbnRlbnRzLCB1c2VyIGNhbiBjbGljayAqLwogICAgICAgICAgICAgICAgICAgICAgICAvKiBvbiBhbnkgb2YgdGhvc2UgZWxlbWVudHMgaW5zdGVhZCBvZiB0aGVpciBwYXJlbnQgJy5zZi10b2dnbGUnIGVsZW1lbnQgKi8KICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCFoYXNDbGFzcyh0b2dnbGUsICdzZi10b2dnbGUnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlID0gdG9nZ2xlLnBhcmVudE5vZGU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0b2dnbGUuZ2V0QXR0cmlidXRlKCdkYXRhLXRvZ2dsZS1zZWxlY3RvcicpKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHRvZ2dsZSwgJ3NmLXRvZ2dsZS1vbicpOwogICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyh0b2dnbGUsICdzZi10b2dnbGUtb2ZmJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKGVsZW1lbnQsICdzZi10b2dnbGUtaGlkZGVuJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKGVsZW1lbnQsICdzZi10b2dnbGUtdmlzaWJsZScpOwoKICAgICAgICAgICAgICAgICAgICAgICAgLyogdGhlIHRvZ2dsZSBkb2Vzbid0IGNoYW5nZSBpdHMgY29udGVudHMgd2hlbiBjbGlja2luZyBvbiBpdCAqLwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRvZ2dsZS5oYXNBdHRyaWJ1dGUoJ2RhdGEtdG9nZ2xlLWFsdC1jb250ZW50JykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0b2dnbGUuaGFzQXR0cmlidXRlKCdkYXRhLXRvZ2dsZS1vcmlnaW5hbC1jb250ZW50JykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9nZ2xlLW9yaWdpbmFsLWNvbnRlbnQnLCB0b2dnbGUuaW5uZXJIVE1MKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRDb250ZW50ID0gdG9nZ2xlLmlubmVySFRNTDsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9yaWdpbmFsQ29udGVudCA9IHRvZ2dsZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG9nZ2xlLW9yaWdpbmFsLWNvbnRlbnQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFsdENvbnRlbnQgPSB0b2dnbGUuZ2V0QXR0cmlidXRlKCdkYXRhLXRvZ2dsZS1hbHQtY29udGVudCcpOwogICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGUuaW5uZXJIVE1MID0gY3VycmVudENvbnRlbnQgIT09IGFsdENvbnRlbnQgPyBhbHRDb250ZW50IDogb3JpZ2luYWxDb250ZW50OwogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAvKiBQcmV2ZW50cyBmcm9tIGRpc2FsbG93aW5nIGNsaWNrcyBvbiBsaW5rcyBpbnNpZGUgdG9nZ2xlcyAqLwogICAgICAgICAgICAgICAgICAgIHZhciB0b2dnbGVMaW5rcyA9IHRvZ2dsZXNbaV0ucXVlcnlTZWxlY3RvckFsbCgnYScpOwogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdG9nZ2xlTGlua3MubGVuZ3RoOyBqKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcih0b2dnbGVMaW5rc1tqXSwgJ2NsaWNrJywgZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAvKiBQcmV2ZW50cyBmcm9tIGRpc2FsbG93aW5nIGNsaWNrcyBvbiBcImNvcHkgdG8gY2xpcGJvYXJkXCIgZWxlbWVudHMgaW5zaWRlIHRvZ2dsZXMgKi8KICAgICAgICAgICAgICAgICAgICB2YXIgY29weVRvQ2xpcGJvYXJkRWxlbWVudHMgPSB0b2dnbGVzW2ldLnF1ZXJ5U2VsZWN0b3JBbGwoJ3NwYW5bZGF0YS1jbGlwYm9hcmQtdGV4dF0nKTsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGNvcHlUb0NsaXBib2FyZEVsZW1lbnRzLmxlbmd0aDsgaysrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoY29weVRvQ2xpcGJvYXJkRWxlbWVudHNba10sICdjbGljaycsIGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlc1tpXS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvY2Vzc2VkJywgJ3RydWUnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGluaXRpYWxpemVMb2dzVGFibGU6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgU2Zqcy51cGRhdGVMb2dzVGFibGUoKTsKCiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubG9nLWZpbHRlciBpbnB1dCcpLmZvckVhY2goKGlucHV0KSA9PiB7CiAgICAgICAgICAgICAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4geyBTZmpzLnVwZGF0ZUxvZ3NUYWJsZSgpOyB9KTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5maWx0ZXItc2VsZWN0LWFsbC1vci1ub25lIGJ1dHRvbicpLmZvckVhY2goKGxpbmspID0+IHsKICAgICAgICAgICAgICAgICAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RBbGwgPSBsaW5rLmNsYXNzTGlzdC5jb250YWlucygnc2VsZWN0LWFsbCcpOwogICAgICAgICAgICAgICAgICAgICAgICBsaW5rLmNsb3Nlc3QoJy5sb2ctZmlsdGVyLWNvbnRlbnQnKS5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCcpLmZvckVhY2goKGlucHV0KSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5jaGVja2VkID0gc2VsZWN0QWxsOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgIFNmanMudXBkYXRlTG9nc1RhYmxlKCk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnZGV0YWlscy5sb2ctZmlsdGVyJykuZm9yRWFjaCgoZmlsdGVyRWxlbWVudCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWZpbHRlckVsZW1lbnQuY29udGFpbnMoZXZlbnQudGFyZ2V0KSAmJiBmaWx0ZXJFbGVtZW50Lm9wZW4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlckVsZW1lbnQub3BlbiA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHVwZGF0ZUxvZ3NUYWJsZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZFR5cGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbG9nLWZpbHRlci10eXBlIGlucHV0OmNoZWNrZWQnKS52YWx1ZTsKICAgICAgICAgICAgICAgIGNvbnN0IHByaW9yaXRpZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjbG9nLWZpbHRlci1wcmlvcml0eSBpbnB1dCcpOwogICAgICAgICAgICAgICAgY29uc3QgYWxsUHJpb3JpdGllcyA9IEFycmF5LmZyb20ocHJpb3JpdGllcykubWFwKChpbnB1dCkgPT4gaW5wdXQudmFsdWUpOwogICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRQcmlvcml0aWVzID0gQXJyYXkuZnJvbShwcmlvcml0aWVzKS5maWx0ZXIoKGlucHV0KSA9PiBpbnB1dC5jaGVja2VkKS5tYXAoKGlucHV0KSA9PiBpbnB1dC52YWx1ZSk7CiAgICAgICAgICAgICAgICBjb25zdCBjaGFubmVscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyNsb2ctZmlsdGVyLWNoYW5uZWwgaW5wdXQnKTsKICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkQ2hhbm5lbHMgPSBBcnJheS5mcm9tKGNoYW5uZWxzKS5maWx0ZXIoKGlucHV0KSA9PiBpbnB1dC5jaGVja2VkKS5tYXAoKGlucHV0KSA9PiBpbnB1dC52YWx1ZSk7CgogICAgICAgICAgICAgICAgY29uc3QgbG9ncyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3RhYmxlLmxvZ3MnKTsKICAgICAgICAgICAgICAgIGlmIChudWxsID09PSBsb2dzKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8qIGhpZGUgcm93cyB0aGF0IGRvbid0IG1hdGNoIHRoZSBjdXJyZW50IGZpbHRlcnMgKi8KICAgICAgICAgICAgICAgIGxldCBudW1WaXNpYmxlUm93cyA9IDA7CiAgICAgICAgICAgICAgICBsb2dzLnF1ZXJ5U2VsZWN0b3JBbGwoJ3Rib2R5IHRyJykuZm9yRWFjaCgocm93KSA9PiB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCdhbGwnICE9PSBzZWxlY3RlZFR5cGUgJiYgc2VsZWN0ZWRUeXBlICE9PSByb3cuZ2V0QXR0cmlidXRlKCdkYXRhLXR5cGUnKSkgewogICAgICAgICAgICAgICAgICAgICAgICByb3cuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJpb3JpdHkgPSByb3cuZ2V0QXR0cmlidXRlKCdkYXRhLXByaW9yaXR5Jyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGZhbHNlID09PSBzZWxlY3RlZFByaW9yaXRpZXMuaW5jbHVkZXMocHJpb3JpdHkpICYmIHRydWUgPT09IGFsbFByaW9yaXRpZXMuaW5jbHVkZXMocHJpb3JpdHkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAoJycgIT09IHJvdy5nZXRBdHRyaWJ1dGUoJ2RhdGEtY2hhbm5lbCcpICYmIGZhbHNlID09PSBzZWxlY3RlZENoYW5uZWxzLmluY2x1ZGVzKHJvdy5nZXRBdHRyaWJ1dGUoJ2RhdGEtY2hhbm5lbCcpKSkgewogICAgICAgICAgICAgICAgICAgICAgICByb3cuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgcm93LnN0eWxlLmRpc3BsYXkgPSAndGFibGUtcm93JzsKICAgICAgICAgICAgICAgICAgICBudW1WaXNpYmxlUm93cysrOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcigndGFibGUubG9ncycpLnN0eWxlLmRpc3BsYXkgPSAwID09PSBudW1WaXNpYmxlUm93cyA/ICdub25lJyA6ICd0YWJsZSc7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubm8tbG9ncy1tZXNzYWdlJykuc3R5bGUuZGlzcGxheSA9IDAgPT09IG51bVZpc2libGVSb3dzID8gJ2Jsb2NrJyA6ICdub25lJzsKCiAgICAgICAgICAgICAgICAvKiB1cGRhdGUgdGhlIHNlbGVjdGVkIHRvdGFscyBvZiBhbGwgZmlsdGVycyAqLwogICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2xvZy1maWx0ZXItcHJpb3JpdHkgLmZpbHRlci1hY3RpdmUtbnVtJykuaW5uZXJUZXh0ID0gKHByaW9yaXRpZXMubGVuZ3RoID09PSBzZWxlY3RlZFByaW9yaXRpZXMubGVuZ3RoKSA/ICdBbGwnIDogc2VsZWN0ZWRQcmlvcml0aWVzLmxlbmd0aDsKICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNsb2ctZmlsdGVyLWNoYW5uZWwgLmZpbHRlci1hY3RpdmUtbnVtJykuaW5uZXJUZXh0ID0gKGNoYW5uZWxzLmxlbmd0aCA9PT0gc2VsZWN0ZWRDaGFubmVscy5sZW5ndGgpID8gJ0FsbCcgOiBzZWxlY3RlZENoYW5uZWxzLmxlbmd0aDsKCiAgICAgICAgICAgICAgICAvKiB1cGRhdGUgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBcImxvZyB0eXBlXCIgdGFiICovCiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjbG9nLWZpbHRlci10eXBlIGxpJykuZm9yRWFjaCgodGFiKSA9PiB0YWIuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJykpOwogICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI2xvZy1maWx0ZXItdHlwZSBpbnB1dFt2YWx1ZT1cIlwke3NlbGVjdGVkVHlwZX1cIl1gKS5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpOwogICAgICAgICAgICB9LAogICAgICAgIH07CiAgICB9KSgpOwoKICAgIFNmanMuYWRkRXZlbnRMaXN0ZW5lcihkb2N1bWVudCwgJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbigpIHsKICAgICAgICBTZmpzLmNyZWF0ZVRhYnMoKTsKICAgICAgICBTZmpzLmNyZWF0ZVRvZ2dsZXMoKTsKICAgIH0pOwp9Ci8qXV0+Ki88L3NjcmlwdD4KIiwgIkBXZWJQcm9maWxlci9Qcm9maWxlci9iYXNlX2pzLmh0bWwudHdpZyIsICIvQXBwbGljYXRpb25zL1hBTVBQL3hhbXBwZmlsZXMvaHRkb2NzL21lZGlhdGVrZm9ybWF0aW9uL3ZlbmRvci9zeW1mb255L3dlYi1wcm9maWxlci1idW5kbGUvUmVzb3VyY2VzL3ZpZXdzL1Byb2ZpbGVyL2Jhc2VfanMuaHRtbC50d2lnIik7CiAgICB9Cn0KIjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWVzcGFjZXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjE6e3M6NDg6IlxfX1R3aWdUZW1wbGF0ZV83YTdlNjczM2VlZWVkNTg0MDk1ODExOGY2ZjRkMDg0NyI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18iOjE0OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo0ODoiXF9fVHdpZ1RlbXBsYXRlXzdhN2U2NzMzZWVlZWQ1ODQwOTU4MTE4ZjZmNGQwODQ3IjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6NDc6Il9fVHdpZ1RlbXBsYXRlXzdhN2U2NzMzZWVlZWQ1ODQwOTU4MTE4ZjZmNGQwODQ3Ijt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGRvY0Jsb2NrIjtOO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwByZWFkT25seSI7YjowO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBwYXJlbnQiO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czoxNDoiXFR3aWdcVGVtcGxhdGUiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czo4OiJUZW1wbGF0ZSI7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBpbXBsZW1lbnRzIjthOjA6e31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AY29uc3RhbnRzIjthOjA6e31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AcHJvcGVydGllcyI7YToyOntzOjU3OiJcX19Ud2lnVGVtcGxhdGVfN2E3ZTY3MzNlZWVlZDU4NDA5NTgxMThmNmY0ZDA4NDc6OiRzb3VyY2UiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkiOjExOntzOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjU3OiJcX19Ud2lnVGVtcGxhdGVfN2E3ZTY3MzNlZWVlZDU4NDA5NTgxMThmNmY0ZDA4NDc6OiRzb3VyY2UiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czo2OiJzb3VyY2UiO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBkb2NCbG9jayI7TjtzOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQB0eXBlcyI7YTowOnt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAZGVmYXVsdCI7TjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBzdGF0aWMiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo3OiJwcml2YXRlIjt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjE4O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AGVuZExvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToxODtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQB0eXBlIjtOO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AHJlYWRPbmx5IjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAbWV0YWRhdGEiO2E6MDp7fX1zOjU3OiJcX19Ud2lnVGVtcGxhdGVfN2E3ZTY3MzNlZWVlZDU4NDA5NTgxMThmNmY0ZDA4NDc6OiRtYWNyb3MiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkiOjExOntzOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjU3OiJcX19Ud2lnVGVtcGxhdGVfN2E3ZTY3MzNlZWVlZDU4NDA5NTgxMThmNmY0ZDA4NDc6OiRtYWNyb3MiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czo2OiJtYWNyb3MiO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBkb2NCbG9jayI7TjtzOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQB0eXBlcyI7YTowOnt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAZGVmYXVsdCI7czoyOiJbXSI7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAc3RhdGljIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NzoicHJpdmF0ZSI7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToxOTtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBlbmRMb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MTk7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAdHlwZSI7TjtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQByZWFkT25seSI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AG1ldGFkYXRhIjthOjA6e319fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBtZXRob2RzIjthOjY6e3M6NjM6IlxfX1R3aWdUZW1wbGF0ZV83YTdlNjczM2VlZWVkNTg0MDk1ODExOGY2ZjRkMDg0Nzo6X19jb25zdHJ1Y3QoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjEyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO047czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NjM6IlxfX1R3aWdUZW1wbGF0ZV83YTdlNjczM2VlZWVkNTg0MDk1ODExOGY2ZjRkMDg0Nzo6X19jb25zdHJ1Y3QoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjExOiJfX2NvbnN0cnVjdCI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NjoicHVibGljIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YToxOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czozOiJlbnYiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xPYmplY3RfIjoxOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8AZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czoxNzoiXFR3aWdcRW52aXJvbm1lbnQiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxMToiRW52aXJvbm1lbnQiO319czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MjE7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6NTIzO31zOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZW5kTG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjMxO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjczNjt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjU3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAaGFzUmV0dXJuQnlSZWZlcmVuY2UiO2I6MDtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbWV0YWRhdGEiO2E6MDp7fX1zOjYxOiJcX19Ud2lnVGVtcGxhdGVfN2E3ZTY3MzNlZWVlZDU4NDA5NTgxMThmNmY0ZDA4NDc6OmRvRGlzcGxheSgpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6MTI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TjtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2MToiXF9fVHdpZ1RlbXBsYXRlXzdhN2U2NzMzZWVlZWQ1ODQwOTU4MTE4ZjZmNGQwODQ3Ojpkb0Rpc3BsYXkoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjk6ImRvRGlzcGxheSI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6OToicHJvdGVjdGVkIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YToyOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo3OiJjb250ZXh0IjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQXJyYXlfIjozOntzOjEyOiIAKgB2YWx1ZVR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjEwOiIAKgBrZXlUeXBlIjtOO3M6MTc6IgAqAGRlZmF1bHRLZXlUeXBlIjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29tcG91bmQiOjI6e3M6NTI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQWdncmVnYXRlZFR5cGUAdHlwZXMiO2E6Mjp7aTowO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xTdHJpbmdfIjowOnt9aToxO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xJbnRlZ2VyIjowOnt9fXM6NTI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQWdncmVnYXRlZFR5cGUAdG9rZW4iO3M6MToifCI7fX1zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO31pOjE7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo2OiJibG9ja3MiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBcnJheV8iOjM6e3M6MTI6IgAqAHZhbHVlVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6MTA6IgAqAGtleVR5cGUiO047czoxNzoiACoAZGVmYXVsdEtleVR5cGUiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb21wb3VuZCI6Mjp7czo1MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBZ2dyZWdhdGVkVHlwZQB0eXBlcyI7YToyOntpOjA7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXFN0cmluZ18iOjA6e31pOjE7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEludGVnZXIiOjA6e319czo1MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBZ2dyZWdhdGVkVHlwZQB0b2tlbiI7czoxOiJ8Ijt9fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO3M6MjoiW10iO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTozMztzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTo3NDM7fXM6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABlbmRMb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6OTU2O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjQ3MDk0O31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NTc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABoYXNSZXR1cm5CeVJlZmVyZW5jZSI7YjowO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABtZXRhZGF0YSI7YTowOnt9fXM6Njc6IlxfX1R3aWdUZW1wbGF0ZV83YTdlNjczM2VlZWVkNTg0MDk1ODExOGY2ZjRkMDg0Nzo6Z2V0VGVtcGxhdGVOYW1lKCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjoxMjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2siOjc6e3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAc3VtbWFyeSI7czowOiIiO3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6MDoiIjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX1zOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHRhZ3MiO2E6MTp7aTowO086NDY6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXEdlbmVyaWMiOjI6e3M6NzoiACoAbmFtZSI7czoxODoiY29kZUNvdmVyYWdlSWdub3JlIjtzOjE0OiIAKgBkZXNjcmlwdGlvbiI7Tjt9fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAY29udGV4dCI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbnRleHQiOjI6e3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dABuYW1lc3BhY2UiO3M6MDoiIjtzOjU2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbnRleHQAbmFtZXNwYWNlQWxpYXNlcyI7YTowOnt9fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAbG9jYXRpb24iO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlU3RhcnQiO2I6MDtzOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVFbmQiO2I6MDt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6Njc6IlxfX1R3aWdUZW1wbGF0ZV83YTdlNjczM2VlZWVkNTg0MDk1ODExOGY2ZjRkMDg0Nzo6Z2V0VGVtcGxhdGVOYW1lKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxNToiZ2V0VGVtcGxhdGVOYW1lIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo2OiJwdWJsaWMiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjk2MTtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTo0NzE0NDt9czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGVuZExvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo5NjQ7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6NDcyNDY7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czo1NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGhhc1JldHVybkJ5UmVmZXJlbmNlIjtiOjA7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAG1ldGFkYXRhIjthOjA6e319czo2MzoiXF9fVHdpZ1RlbXBsYXRlXzdhN2U2NzMzZWVlZWQ1ODQwOTU4MTE4ZjZmNGQwODQ3Ojppc1RyYWl0YWJsZSgpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6MTI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6MDoiIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjA6IiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjE6e2k6MDtPOjQ2OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xHZW5lcmljIjoyOntzOjc6IgAqAG5hbWUiO3M6MTg6ImNvZGVDb3ZlcmFnZUlnbm9yZSI7czoxNDoiACoAZGVzY3JpcHRpb24iO047fX1zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGNvbnRleHQiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0IjoyOntzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbnRleHQAbmFtZXNwYWNlIjtzOjA6IiI7czo1NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0AG5hbWVzcGFjZUFsaWFzZXMiO2E6MDp7fX1zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGxvY2F0aW9uIjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZVN0YXJ0IjtiOjA7czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlRW5kIjtiOjA7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjYzOiJcX19Ud2lnVGVtcGxhdGVfN2E3ZTY3MzNlZWVlZDU4NDA5NTgxMThmNmY0ZDA4NDc6OmlzVHJhaXRhYmxlKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxMToiaXNUcmFpdGFibGUiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjY6InB1YmxpYyI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6OTY5O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjQ3Mjk2O31zOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZW5kTG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjk3MjtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTo0NzM1ODt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjU3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAaGFzUmV0dXJuQnlSZWZlcmVuY2UiO2I6MDtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbWV0YWRhdGEiO2E6MDp7fX1zOjY0OiJcX19Ud2lnVGVtcGxhdGVfN2E3ZTY3MzNlZWVlZDU4NDA5NTgxMThmNmY0ZDA4NDc6OmdldERlYnVnSW5mbygpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6MTI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6MDoiIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjA6IiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjE6e2k6MDtPOjQ2OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xHZW5lcmljIjoyOntzOjc6IgAqAG5hbWUiO3M6MTg6ImNvZGVDb3ZlcmFnZUlnbm9yZSI7czoxNDoiACoAZGVzY3JpcHRpb24iO047fX1zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGNvbnRleHQiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0IjoyOntzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbnRleHQAbmFtZXNwYWNlIjtzOjA6IiI7czo1NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0AG5hbWVzcGFjZUFsaWFzZXMiO2E6MDp7fX1zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGxvY2F0aW9uIjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZVN0YXJ0IjtiOjA7czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlRW5kIjtiOjA7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjY0OiJcX19Ud2lnVGVtcGxhdGVfN2E3ZTY3MzNlZWVlZDU4NDA5NTgxMThmNmY0ZDA4NDc6OmdldERlYnVnSW5mbygpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTI6ImdldERlYnVnSW5mbyI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NjoicHVibGljIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo5Nzc7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6NDc0MDg7fXM6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABlbmRMb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6OTgwO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjQ3NjM3O31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NTc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABoYXNSZXR1cm5CeVJlZmVyZW5jZSI7YjowO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABtZXRhZGF0YSI7YTowOnt9fXM6Njg6IlxfX1R3aWdUZW1wbGF0ZV83YTdlNjczM2VlZWVkNTg0MDk1ODExOGY2ZjRkMDg0Nzo6Z2V0U291cmNlQ29udGV4dCgpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6MTI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TjtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2ODoiXF9fVHdpZ1RlbXBsYXRlXzdhN2U2NzMzZWVlZWQ1ODQwOTU4MTE4ZjZmNGQwODQ3OjpnZXRTb3VyY2VDb250ZXh0KCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxNjoiZ2V0U291cmNlQ29udGV4dCI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NjoicHVibGljIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo5ODI7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6NDc2NDQ7fXM6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABlbmRMb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MTg1OTtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTo4OTcxMTt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjU3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAaGFzUmV0dXJuQnlSZWZlcmVuY2UiO2I6MDtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbWV0YWRhdGEiO2E6MDp7fX19czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAHVzZWRUcmFpdHMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MTY7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGVuZExvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToxODYwO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBtZXRhZGF0YSI7YTowOnt9fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e31zOjQwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGVudW1zIjthOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG1ldGFkYXRhIjthOjA6e319";